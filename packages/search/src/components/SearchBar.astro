---
import { Icon } from '@docs/ui/components';
import { translate } from '@docs/i18n/utils';
import type { LocaleKey } from '@docs/i18n/locales';

// 検索関連のユーティリティをインポート
// リファクタリングで分割したコンポーネントとユーティリティを使用

interface Props {
  lang: LocaleKey;
  placeholder?: string;
  className?: string;
}

const {
  lang,
  placeholder = translate('search.placeholder', lang),
  className = '',
} = Astro.props;

const translations = {
  placeholder: placeholder,
  searchResults: translate('search.searchResults', lang),
  noResults: translate('search.noResults', lang),
  oneResult: translate('search.oneResult', lang),
  manyResults: translate('search.manyResults', lang),
  searching: translate('search.searching', lang),
  closeSearch: translate('search.closeSearch', lang),
  searchError: translate('search.error', lang),
  ctrlKey: 'Ctrl',
  slashKey: '/',
};
---

<site-search
  class={className}
  data-translations={JSON.stringify(translations)}
  data-lang={lang}
  data-base-url={import.meta.env.BASE_URL}
>
  <button
    data-open-modal
    aria-label={translate('search.label', lang)}
    aria-keyshortcuts="Control+K /"
  >
    <Icon name="search" />
    <span class="search-text">{translate('search.label', lang)}</span>
    <kbd class="shortcut-hint">
      <kbd class="platform-key">{translations.ctrlKey}</kbd><kbd>K</kbd>
    </kbd>
  </button>

  <dialog style="padding:0" aria-label={translate('search.label', lang)}>
    <div class="dialog-frame">
      <div class="dialog-header">
        <div class="search-input-container">
          <Icon name="search" class="search-icon" />
          <input 
            type="search" 
            id="search-input" 
            placeholder={placeholder}
            autocomplete="off"
            autocorrect="off"
            autocapitalize="off"
            spellcheck="false"
          />
        </div>
        <button data-close-modal class="close-button">
          <Icon name="close" />
          <span class="sr-only">{translations.closeSearch}</span>
        </button>
      </div>
      <div class="search-results">
        <div id="search-results-container" class="results-container">
          <div class="loading-indicator">
            <div class="loading-spinner"></div>
            <p>{translate('search.searching', lang)}</p>
          </div>
        </div>
      </div>
    </div>
  </dialog>
</site-search>

<style>
  site-search {
    display: contents;
  }

  button[data-open-modal] {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border: 1px solid var(--docs-color-gray-5);
    border-radius: 0.5rem;
    padding: 0.5rem 0.75rem;
    background-color: var(--docs-color-bg);
    color: var(--docs-color-text);
    cursor: pointer;
    font-size: var(--docs-text-sm);
    width: 100%;
    max-width: 22rem;
    transition: border-color 0.2s ease, background-color 0.2s ease, color 0.2s ease;
  }

  button[data-open-modal]:hover {
    border-color: var(--docs-color-primary);
    background-color: var(--docs-color-primary-low);
    color: var(--docs-color-primary);
  }

  .search-text {
    display: none;
  }

  @media (min-width: 50rem) {
    .search-text {
      display: block;
    }
  }

  .shortcut-hint {
    margin-left: auto;
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }

  kbd {
    font-family: var(--docs-font-system);
    font-size: var(--docs-text-xs);
    border-radius: 0.25rem;
    padding: 0.125rem 0.375rem;
    background-color: var(--docs-color-gray-6);
    color: var(--docs-color-gray-2);
    border: 1px solid var(--docs-color-gray-5);
  }

  dialog {
    margin: 0;
    background-color: var(--docs-color-bg);
    border: 1px solid var(--docs-color-gray-5);
    width: 100%;
    max-width: 100%;
    height: 100%;
    max-height: 100%;
    box-shadow: var(--docs-shadow-lg);
  }

  dialog[open] {
    display: flex;
  }

  dialog::backdrop {
    background-color: rgba(0, 0, 0, 0.65);
    backdrop-filter: blur(0.25rem);
  }

  .dialog-frame {
    display: flex;
    flex-direction: column;
    width: 100%;
    height: 100%;
    background-color: white;
  }

  .dialog-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    border-bottom: 1px solid var(--docs-color-gray-5);
  }

  .search-input-container {
    position: relative;
    flex-grow: 1;
  }

  .search-icon {
    position: absolute;
    left: 0.75rem;
    top: 50%;
    transform: translateY(-50%);
    width: 1.25rem;
    height: 1.25rem;
    color: var(--docs-color-gray-3);
  }

  #search-input {
    width: 100%;
    padding: 0.75rem 1rem 0.75rem 2.5rem;
    border: 1px solid var(--docs-color-gray-5);
    border-radius: 0.5rem;
    background-color: var(--docs-color-bg);
    color: var(--docs-color-text);
    font-size: var(--docs-text-base);
  }

  #search-input:focus {
    outline: none;
    border-color: var(--docs-color-primary);
    box-shadow: 0 0 0 3px var(--docs-color-primary-low);
  }

  .close-button {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem;
    border: none;
    background-color: transparent;
    color: var(--docs-color-gray-3);
    border-radius: 0.375rem;
    cursor: pointer;
    transition: background-color 0.2s ease, color 0.2s ease;
  }

  .close-button:hover {
    background-color: var(--docs-color-gray-6);
    color: var(--docs-color-text);
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }

  .search-results {
    flex-grow: 1;
    overflow-y: auto;
    padding: 1rem;
  }

  .results-container {
    max-width: 48rem;
    margin: 0 auto;
  }

  .loading-indicator {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 2rem 0;
    color: var(--docs-color-gray-3);
  }

  .loading-spinner {
    width: 2rem;
    height: 2rem;
    border: 2px solid var(--docs-color-gray-5);
    border-top-color: var(--docs-color-primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 1rem;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  @media (min-width: 50rem) {
    dialog {
      margin: 4rem auto auto;
      border-radius: 0.5rem;
      width: 90%;
      max-width: 40rem;
      height: max-content;
      min-height: 15rem;
      max-height: calc(100% - 8rem);
    }

    .dialog-header {
      padding: 1.25rem 1.5rem;
    }

    .search-results {
      padding: 1.25rem 1.5rem;
    }
  }
</style>

<script>
  // 分割したユーティリティをインポート
  import { loadSearchManifest, getSearchIndexPath, performSearch, groupResultsByCategory } from '../utils/searchClient';
  import { displayResults, displayError, clearResults } from '../components/SearchDisplay';
  
  class SiteSearch extends HTMLElement {
    pageLang: string = 'en';
    baseUrl: string = '';
    currentProjectName: string = 'top-page';
    searchManifest: any | null = null;
    isManifestLoading: boolean = false;

    constructor() {
      super();
      // 要素の取得
      const openBtn = this.querySelector<HTMLButtonElement>('button[data-open-modal]')!;
      const closeBtn = this.querySelector<HTMLButtonElement>('button[data-close-modal]')!;
      const dialog = this.querySelector('dialog')!;
      const dialogFrame = this.querySelector('.dialog-frame')!;
      const searchInput = this.querySelector<HTMLInputElement>('#search-input')!;
      
      // ダイアログが初期化されていることを確認
      if (!dialog) {
        console.error('Search dialog element not found');
        return;
      }
      const resultsContainer = this.querySelector<HTMLDivElement>('#search-results-container')!;

      let translations = {};
      try {
        translations = JSON.parse(this.dataset.translations || '{}');
      } catch (e) {
        console.error('Failed to parse search translations:', e);
      }

      this.pageLang = this.dataset.lang || 'en';
      this.baseUrl = this.dataset.baseUrl || '';
      if (this.baseUrl === '/') this.baseUrl = '';
      this.currentProjectName = this.dataset.currentProjectName || 'top-page';

      this.loadSearchManifest();

      const onClick = (event: MouseEvent) => {
        const isLink = 'href' in (event.target || {});
        if (
          isLink ||
          (document.body.contains(event.target as Node) &&
            !dialogFrame.contains(event.target as Node))
        ) {
          closeModal();
        }
      };

      const openModal = async (event?: MouseEvent, translations?: any) => {
        try {
          // ダイアログを確実に表示する
          dialog.showModal();
          // bodyにクラスを追加
          document.body.classList.add('search-modal-open');
          // 入力フィールドにフォーカス
          searchInput.focus();
          // イベント伝播を停止
          event?.stopPropagation();
          // クリックイベントリスナーを追加
          window.addEventListener('click', onClick);
          
          console.log('Search dialog opened successfully');
        } catch (error) {
          console.error('Failed to open search dialog:', error);
        }

        if (!this.searchManifest && !this.isManifestLoading) {
            await this.loadSearchManifest();
        }
        if (!this.searchManifest && translations) {
            displayError(
                translations.searchError ? translations.searchError + ': Manifest load failed' : 'Search manifest could not be loaded.',
                resultsContainer, 
                translations
            );
            searchInput.disabled = true;
        } else {
            searchInput.disabled = false;
        }
      };

      const closeModal = () => {
        dialog.close();
        document.body.classList.remove('search-modal-open');
        window.removeEventListener('click', onClick);
      };

      // 検索ボタンのクリックイベントを強化
      openBtn.addEventListener('click', (event) => {
        event.preventDefault();
        event.stopPropagation();
        console.log('Search button clicked');
        openModal(event, translations);
      });
      
      // 閉じるボタンのクリックイベント
      closeBtn.addEventListener('click', (event) => {
        event.preventDefault();
        event.stopPropagation();
        closeModal();
      });

      dialog.addEventListener('close', () => {
        document.body.classList.remove('search-modal-open');
        window.removeEventListener('click', onClick);
      });

      window.addEventListener('keydown', (e) => {
        if ((e.ctrlKey === true || e.metaKey === true) && e.key === 'k') {
          dialog.open ? closeModal() : openModal(undefined, translations);
          e.preventDefault();
        }
        
        if (e.key === '/' && !['INPUT', 'TEXTAREA'].includes(document.activeElement?.tagName || '')) {
          if (!dialog.open) {
            openModal(undefined, translations);
            e.preventDefault();
          }
        }
        
        if (e.key === 'Escape' && dialog.open) {
          closeModal();
        }
      });

      searchInput.addEventListener('input', () => {
        const query = searchInput.value.trim();
        if (query.length >= 2) {
          this.performSearch(query, resultsContainer, translations);
        } else if (query.length === 0) {
          clearResults(resultsContainer);
        }
      });

      const platformKey = this.querySelector('.platform-key');
      if (platformKey && /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform)) {
        platformKey.textContent = '⌘';
      }
    }

    async loadSearchManifest() {
      if (this.searchManifest || this.isManifestLoading) return;
      this.isManifestLoading = true;
      
      try {
        // 分割したユーティリティを使用してマニフェストを読み込む
        const { searchManifest, projectName } = await loadSearchManifest(this.baseUrl, window.location.pathname);
        this.searchManifest = searchManifest;
        this.currentProjectName = projectName;
      } catch (error) {
        console.error('マニフェストの読み込み中にエラーが発生しました:', error);
      } finally {
        this.isManifestLoading = false;
      }
    }

    // clearResultsメソッドは削除し、インポートした関数を使用

    async performSearch(query: string, container: HTMLElement, translations: any) {
      // トップページの場合は検索を行わない
      if (this.currentProjectName === 'top-page') {
        console.log('トップページでは検索をサポートしていません');
        displayError(
          translations.searchError ? translations.searchError + ': トップページでは検索をサポートしていません' : 'トップページでは検索をサポートしていません。ドキュメントページに移動して検索してください。',
          container,
          translations
        );
        return;
      }
      
      // マニフェストが読み込まれているか確認
      if (!this.searchManifest) {
        if (this.isManifestLoading) {
          container.innerHTML = `<div class="loading-indicator"><p>Loading search data...</p></div>`;
          return;
        }
        console.error('Search manifest is not loaded. Cannot perform search.');
        displayError(
          translations.searchError ? translations.searchError + ': Manifest not loaded' : 'Search data not available.',
          container,
          translations
        );
        return;
      }

      try {
        // 検索中の表示
        container.innerHTML = `
          <div class="loading-indicator">
            <div class="loading-spinner"></div>
            <p>${translations.searching || 'Searching...'}</p>
          </div>
        `;

        // 現在のパスから言語とバージョンを取得
        const currentPathname = window.location.pathname;
        const relativeSegments = currentPathname.split('/').filter(s => s.length > 0);
        
        // プロジェクト、言語、バージョンの情報を取得
        const projectKey = this.currentProjectName;
        let langKey = this.pageLang;
        let versionKey = 'v1';

        // パスから言語とバージョンを特定
        let langSegmentIndex = 0;
        if (relativeSegments.length > 0 && relativeSegments[0].toLowerCase() === projectKey.toLowerCase()) {
          langSegmentIndex = 1;
        }

        if (relativeSegments.length > langSegmentIndex) {
          if (relativeSegments[langSegmentIndex].length === 2 || relativeSegments[langSegmentIndex].length === 5) {
            langKey = relativeSegments[langSegmentIndex];
          }
        }
        
        if (relativeSegments.length > langSegmentIndex + 1) {
          if (relativeSegments[langSegmentIndex + 1].startsWith('v')) {
            versionKey = relativeSegments[langSegmentIndex + 1];
          }
        }
        
        // 検索インデックスファイルのパスを取得
        const searchIndexPath = getSearchIndexPath(this.searchManifest, projectKey, langKey, versionKey);
        
        // 検索を実行
        const results = await performSearch(searchIndexPath, query);
        
        // 結果をカテゴリでグループ化
        const groupedResults = groupResultsByCategory(results);
        
        // 結果を表示
        displayResults(groupedResults, query, container, translations);
        
      } catch (error) {
        console.error('Search error:', error);
        displayError(
          error instanceof Error ? error.message : 'An error occurred during search',
          container,
          translations
        );
      }
    }

    // 不要なメソッドは分割したユーティリティに移動したため削除
  }

  customElements.define('site-search', SiteSearch);
</script>

<style is:global>
  .search-modal-open {
    overflow: hidden;
  }

  .no-results {
    text-align: center;
    padding: 2rem 0;
    color: var(--docs-color-gray-3);
  }

  .results-header {
    margin-bottom: 1.5rem;
  }

  .results-title {
    font-size: var(--docs-text-xl);
    font-weight: 600;
    color: var(--docs-color-text);
  }

  .results-category {
    margin-bottom: 2rem;
  }

  .category-title {
    font-size: var(--docs-text-lg);
    font-weight: 600;
    color: var(--docs-color-text);
    margin-bottom: 0.75rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid var(--docs-color-gray-5);
  }

  .result-item {
    margin-bottom: 1rem;
    position: relative;
  }

  .result-link {
    display: block;
    padding: 0.75rem;
    border-radius: 0.5rem;
    border: 1px solid var(--docs-color-gray-5);
    background-color: var(--docs-color-bg);
    color: var(--docs-color-text);
    text-decoration: none;
    transition: border-color 0.2s ease, background-color 0.2s ease, box-shadow 0.2s ease;
  }

  .result-link:hover {
    border-color: var(--docs-color-primary);
    background-color: var(--docs-color-primary-low);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  .result-title {
    font-size: var(--docs-text-base);
    font-weight: 600;
    margin: 0 0 0.25rem 0;
    color: var(--docs-color-text);
  }

  .result-breadcrumb {
    font-size: var(--docs-text-xs);
    color: var(--docs-color-gray-3);
    margin-bottom: 0.5rem;
  }

  .result-excerpt {
    font-size: var(--docs-text-sm);
    color: var(--docs-color-gray-2);
    margin: 0;
    line-height: 1.5;
  }

  .search-highlight {
    background-color: var(--docs-color-primary-low);
    color: var(--docs-color-primary);
    font-weight: 600;
    border-radius: 0.25rem;
    padding: 0 0.125rem;
  }

  .search-error {
    background-color: var(--docs-color-danger-low);
    border: 1px solid var(--docs-color-danger);
    color: var(--docs-color-danger);
    border-radius: 0.5rem;
    padding: 1rem;
    margin-top: 1rem;
  }
</style>





