---
import { Icon } from '@docs/ui/components';
import { translate } from '@docs/i18n/utils';
import type { LocaleKey } from '@docs/i18n/locales';

interface Props {
  lang: LocaleKey;
  placeholder?: string;
  className?: string;
}

const {
  lang,
  placeholder = translate('search.placeholder', lang),
  className = '',
} = Astro.props;

const translations = {
  placeholder: placeholder,
  searchResults: translate('search.searchResults', lang),
  noResults: translate('search.noResults', lang),
  oneResult: translate('search.oneResult', lang),
  manyResults: translate('search.manyResults', lang),
  searching: translate('search.searching', lang),
  closeSearch: translate('search.closeSearch', lang),
  searchError: translate('search.error', lang),
  ctrlKey: 'Ctrl',
  slashKey: '/',
};
---

<site-search class={className} data-translations={JSON.stringify(translations)}>
  <button
    data-open-modal
    disabled
    aria-label={translate('search.label', lang)}
    aria-keyshortcuts="Control+K /"
  >
    <Icon name="search" />
    <span class="search-text">{translate('search.label', lang)}</span>
    <kbd class="shortcut-hint">
      <kbd class="platform-key">{translations.ctrlKey}</kbd><kbd>K</kbd>
    </kbd>
  </button>

  <dialog style="padding:0" aria-label={translate('search.label', lang)}>
    <div class="dialog-frame">
      <div class="dialog-header">
        <div class="search-input-container">
          <Icon name="search" class="search-icon" />
          <input 
            type="search" 
            id="search-input" 
            placeholder={placeholder}
            autocomplete="off"
            autocorrect="off"
            autocapitalize="off"
            spellcheck="false"
          />
        </div>
        <button data-close-modal class="close-button">
          <Icon name="close" />
          <span class="sr-only">{translations.closeSearch}</span>
        </button>
      </div>
      <div class="search-results">
        <div id="search-results-container" class="results-container">
          <div class="loading-indicator">
            <div class="loading-spinner"></div>
            <p>{translate('search.searching', lang)}</p>
          </div>
        </div>
      </div>
    </div>
  </dialog>
</site-search>

<style>
  site-search {
    display: contents;
  }

  button[data-open-modal] {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border: 1px solid var(--docs-color-gray-5);
    border-radius: 0.5rem;
    padding: 0.5rem 0.75rem;
    background-color: var(--docs-color-bg);
    color: var(--docs-color-text);
    cursor: pointer;
    font-size: var(--docs-text-sm);
    width: 100%;
    max-width: 22rem;
    transition: border-color 0.2s ease, background-color 0.2s ease, color 0.2s ease;
  }

  button[data-open-modal]:hover {
    border-color: var(--docs-color-primary);
    background-color: var(--docs-color-primary-low);
    color: var(--docs-color-primary);
  }

  .search-text {
    display: none;
  }

  @media (min-width: 50rem) {
    .search-text {
      display: block;
    }
  }

  .shortcut-hint {
    margin-left: auto;
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }

  kbd {
    font-family: var(--docs-font-system);
    font-size: var(--docs-text-xs);
    border-radius: 0.25rem;
    padding: 0.125rem 0.375rem;
    background-color: var(--docs-color-gray-6);
    color: var(--docs-color-gray-2);
    border: 1px solid var(--docs-color-gray-5);
  }

  dialog {
    margin: 0;
    background-color: var(--docs-color-bg);
    border: 1px solid var(--docs-color-gray-5);
    width: 100%;
    max-width: 100%;
    height: 100%;
    max-height: 100%;
    box-shadow: var(--docs-shadow-lg);
  }

  dialog[open] {
    display: flex;
  }

  dialog::backdrop {
    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(0.25rem);
  }

  .dialog-frame {
    display: flex;
    flex-direction: column;
    width: 100%;
    height: 100%;
  }

  .dialog-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    border-bottom: 1px solid var(--docs-color-gray-5);
  }

  .search-input-container {
    position: relative;
    flex-grow: 1;
  }

  .search-icon {
    position: absolute;
    left: 0.75rem;
    top: 50%;
    transform: translateY(-50%);
    width: 1.25rem;
    height: 1.25rem;
    color: var(--docs-color-gray-3);
  }

  #search-input {
    width: 100%;
    padding: 0.75rem 1rem 0.75rem 2.5rem;
    border: 1px solid var(--docs-color-gray-5);
    border-radius: 0.5rem;
    background-color: var(--docs-color-bg);
    color: var(--docs-color-text);
    font-size: var(--docs-text-base);
  }

  #search-input:focus {
    outline: none;
    border-color: var(--docs-color-primary);
    box-shadow: 0 0 0 3px var(--docs-color-primary-low);
  }

  .close-button {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem;
    border: none;
    background-color: transparent;
    color: var(--docs-color-gray-3);
    border-radius: 0.375rem;
    cursor: pointer;
    transition: background-color 0.2s ease, color 0.2s ease;
  }

  .close-button:hover {
    background-color: var(--docs-color-gray-6);
    color: var(--docs-color-text);
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }

  .search-results {
    flex-grow: 1;
    overflow-y: auto;
    padding: 1rem;
  }

  .results-container {
    max-width: 48rem;
    margin: 0 auto;
  }

  .loading-indicator {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 2rem 0;
    color: var(--docs-color-gray-3);
  }

  .loading-spinner {
    width: 2rem;
    height: 2rem;
    border: 2px solid var(--docs-color-gray-5);
    border-top-color: var(--docs-color-primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 1rem;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  @media (min-width: 50rem) {
    dialog {
      margin: 4rem auto auto;
      border-radius: 0.5rem;
      width: 90%;
      max-width: 40rem;
      height: max-content;
      min-height: 15rem;
      max-height: calc(100% - 8rem);
    }

    .dialog-header {
      padding: 1.25rem 1.5rem;
    }

    .search-results {
      padding: 1.25rem 1.5rem;
    }
  }
</style>

<script>
  class SiteSearch extends HTMLElement {
    constructor() {
      super();
      const openBtn = this.querySelector<HTMLButtonElement>('button[data-open-modal]')!;
      const closeBtn = this.querySelector<HTMLButtonElement>('button[data-close-modal]')!;
      const dialog = this.querySelector('dialog')!;
      const dialogFrame = this.querySelector('.dialog-frame')!;
      const searchInput = this.querySelector<HTMLInputElement>('#search-input')!;
      const resultsContainer = this.querySelector<HTMLDivElement>('#search-results-container')!;

      let translations = {};
      try {
        translations = JSON.parse(this.dataset.translations || '{}');
      } catch (e) {
        console.error('Failed to parse search translations:', e);
      }

      /** Close the modal if a user clicks on a link or outside of the modal. */
      const onClick = (event: MouseEvent) => {
        const isLink = 'href' in (event.target || {});
        if (
          isLink ||
          (document.body.contains(event.target as Node) &&
            !dialogFrame.contains(event.target as Node))
        ) {
          closeModal();
        }
      };

      const openModal = (event?: MouseEvent) => {
        dialog.showModal();
        document.body.classList.add('search-modal-open');
        searchInput.focus();
        event?.stopPropagation();
        window.addEventListener('click', onClick);
      };

      const closeModal = () => {
        dialog.close();
        document.body.classList.remove('search-modal-open');
        window.removeEventListener('click', onClick);
      };

      openBtn.addEventListener('click', openModal);
      openBtn.disabled = false;
      closeBtn.addEventListener('click', closeModal);

      dialog.addEventListener('close', () => {
        document.body.classList.remove('search-modal-open');
        window.removeEventListener('click', onClick);
      });

      // Listen for keyboard shortcuts
      window.addEventListener('keydown', (e) => {
        // Ctrl+K or Cmd+K
        if ((e.ctrlKey === true || e.metaKey === true) && e.key === 'k') {
          dialog.open ? closeModal() : openModal();
          e.preventDefault();
        }
        
        // / key (when not in an input field)
        if (e.key === '/' && !['INPUT', 'TEXTAREA'].includes(document.activeElement?.tagName || '')) {
          if (!dialog.open) {
            openModal();
            e.preventDefault();
          }
        }
        
        // Escape key
        if (e.key === 'Escape' && dialog.open) {
          closeModal();
        }
      });

      // Handle search input
      searchInput.addEventListener('input', () => {
        const query = searchInput.value.trim();
        if (query.length >= 2) {
          this.performSearch(query, resultsContainer, translations);
        } else if (query.length === 0) {
          this.clearResults(resultsContainer);
        }
      });

      // Update keyboard shortcut display based on platform
      const platformKey = this.querySelector('.platform-key');
      if (platformKey && /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform)) {
        platformKey.textContent = 'âŒ˜';
      }
    }

    clearResults(container: HTMLElement) {
      container.innerHTML = '';
    }

    async performSearch(query: string, container: HTMLElement, translations: any) {
      try {
        // Show loading indicator
        container.innerHTML = `
          <div class="loading-indicator">
            <div class="loading-spinner"></div>
            <p>${translations.searching || 'Searching...'}</p>
          </div>
        `;

        // Get current language and version from URL
        const pathParts = window.location.pathname.split('/');
        const lang = pathParts[1] || 'en';
        const version = pathParts[2] || 'v1';
        
        // Fetch search index
        const response = await fetch(`/search/index-${lang}-${version}.json`);
        
        if (!response.ok) {
          throw new Error(`Failed to fetch search index: ${response.status}`);
        }
        
        const searchIndex = await response.json();
        
        // Perform search
        const results = searchIndex.filter((item: any) => {
          const titleMatch = item.title.toLowerCase().includes(query.toLowerCase());
          const contentMatch = item.content.toLowerCase().includes(query.toLowerCase());
          return titleMatch || contentMatch;
        });

        // Group results by category
        const groupedResults = this.groupResultsByCategory(results);
        
        // Display results
        this.displayResults(groupedResults, query, container, translations);
        
      } catch (error) {
        console.error('Search error:', error);
        this.displayError(
          error instanceof Error ? error.message : 'An error occurred during search',
          container,
          translations
        );
      }
    }

    groupResultsByCategory(results: any[]) {
      const grouped: Record<string, any[]> = {};
      
      results.forEach(result => {
        const category = result.category || 'Other';
        if (!grouped[category]) {
          grouped[category] = [];
        }
        grouped[category].push(result);
      });
      
      return grouped;
    }

    displayResults(groupedResults: Record<string, any[]>, query: string, container: HTMLElement, translations: any) {
      container.innerHTML = '';
      
      const totalResults = Object.values(groupedResults).flat().length;
      
      if (totalResults === 0) {
        container.innerHTML = `
          <div class="no-results">
            <p>${translations.noResults?.replace('{query}', query) || `No results found for "${query}"`}</p>
          </div>
        `;
        return;
      }
      
      // Create results count header
      const resultsHeader = document.createElement('div');
      resultsHeader.className = 'results-header';
      resultsHeader.innerHTML = `
        <h2 class="results-title">
          ${totalResults === 1 
            ? (translations.oneResult?.replace('{query}', query) || `1 result for "${query}"`) 
            : (translations.manyResults?.replace('{query}', query).replace('{count}', totalResults) || `${totalResults} results for "${query}"`)}
        </h2>
      `;
      container.appendChild(resultsHeader);
      
      // Create results by category
      Object.entries(groupedResults).forEach(([category, results]) => {
        const categoryElement = document.createElement('div');
        categoryElement.className = 'results-category';
        
        categoryElement.innerHTML = `
          <h3 class="category-title">${category}</h3>
          <div class="category-results"></div>
        `;
        
        const categoryResults = categoryElement.querySelector('.category-results')!;
        
        results.forEach(result => {
          const resultElement = document.createElement('div');
          resultElement.className = 'result-item';
          
          // Extract excerpt containing the query
          const excerpt = this.extractRelevantExcerpt(result.content, query);
          
          resultElement.innerHTML = `
            <a href="${result.url}" class="result-link">
              <h4 class="result-title">${this.highlightMatches(result.title, query)}</h4>
              <div class="result-breadcrumb">${result.breadcrumb || `${result.project} / ${result.version}`}</div>
              <p class="result-excerpt">${this.highlightMatches(excerpt, query)}</p>
            </a>
          `;
          
          categoryResults.appendChild(resultElement);
        });
        
        container.appendChild(categoryElement);
      });
    }

    extractRelevantExcerpt(content: string, query: string): string {
      const lowerContent = content.toLowerCase();
      const lowerQuery = query.toLowerCase();
      const index = lowerContent.indexOf(lowerQuery);
      
      if (index === -1) return content.substring(0, 150) + '...';
      
      const start = Math.max(0, index - 75);
      const end = Math.min(content.length, index + query.length + 75);
      let excerpt = content.substring(start, end);
      
      if (start > 0) excerpt = '...' + excerpt;
      if (end < content.length) excerpt = excerpt + '...';
      
      return excerpt;
    }

    highlightMatches(text: string, query: string): string {
      if (!query) return text;
      
      const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
      return text.replace(regex, '<mark class="search-highlight">$1</mark>');
    }

    displayError(message: string, container: HTMLElement, translations: any) {
      container.innerHTML = `
        <div class="search-error">
          <p>${translations.searchError || 'Search error'}: ${message}</p>
        </div>
      `;
    }
  }

  customElements.define('site-search', SiteSearch);
</script>

<style is:global>
  .search-modal-open {
    overflow: hidden;
  }

  .no-results {
    text-align: center;
    padding: 2rem 0;
    color: var(--docs-color-gray-3);
  }

  .results-header {
    margin-bottom: 1.5rem;
  }

  .results-title {
    font-size: var(--docs-text-xl);
    font-weight: 600;
    color: var(--docs-color-text);
  }

  .results-category {
    margin-bottom: 2rem;
  }

  .category-title {
    font-size: var(--docs-text-lg);
    font-weight: 600;
    color: var(--docs-color-text);
    margin-bottom: 0.75rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid var(--docs-color-gray-5);
  }

  .result-item {
    margin-bottom: 1rem;
    position: relative;
  }

  .result-link {
    display: block;
    padding: 0.75rem;
    border-radius: 0.5rem;
    border: 1px solid var(--docs-color-gray-5);
    background-color: var(--docs-color-bg);
    color: var(--docs-color-text);
    text-decoration: none;
    transition: border-color 0.2s ease, background-color 0.2s ease, box-shadow 0.2s ease;
  }

  .result-link:hover {
    border-color: var(--docs-color-primary);
    background-color: var(--docs-color-primary-low);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  .result-title {
    font-size: var(--docs-text-base);
    font-weight: 600;
    margin: 0 0 0.25rem 0;
    color: var(--docs-color-text);
  }

  .result-breadcrumb {
    font-size: var(--docs-text-xs);
    color: var(--docs-color-gray-3);
    margin-bottom: 0.5rem;
  }

  .result-excerpt {
    font-size: var(--docs-text-sm);
    color: var(--docs-color-gray-2);
    margin: 0;
    line-height: 1.5;
  }

  .search-highlight {
    background-color: var(--docs-color-primary-low);
    color: var(--docs-color-primary);
    font-weight: 600;
    border-radius: 0.25rem;
    padding: 0 0.125rem;
  }

  .search-error {
    background-color: var(--docs-color-danger-low);
    border: 1px solid var(--docs-color-danger);
    color: var(--docs-color-danger);
    border-radius: 0.5rem;
    padding: 1rem;
    margin-top: 1rem;
  }
</style>
