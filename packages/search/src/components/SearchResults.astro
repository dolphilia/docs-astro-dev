---
import { Card } from '@docs/ui/components';

interface Props {
  className?: string;
}

const { className = '' } = Astro.props;
---

<div id="search-results" class={`search-results hidden ${className}`}>
  <div class="search-results-header flex justify-between items-center mb-4">
    <h2 class="text-xl font-bold">検索結果</h2>
    <button id="close-search-results" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
      <span class="sr-only">閉じる</span>
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
  </div>
  
  <div id="search-results-container" class="space-y-4">
    <!-- 検索結果がここに動的に挿入されます -->
    <div id="search-loading" class="py-8 text-center hidden">
      <div class="inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary-500"></div>
      <p class="mt-2 text-gray-600 dark:text-gray-400">検索中...</p>
    </div>
    
    <div id="search-empty" class="py-8 text-center hidden">
      <p class="text-gray-600 dark:text-gray-400">検索結果が見つかりませんでした。</p>
    </div>
  </div>
</div>

<script>
  // 検索結果の表示と制御
  const searchResults = document.getElementById('search-results');
  const searchResultsContainer = document.getElementById('search-results-container');
  const searchLoading = document.getElementById('search-loading');
  const searchEmpty = document.getElementById('search-empty');
  const closeSearchResults = document.getElementById('close-search-results');
  
  // 検索イベントをリッスン
  document.addEventListener('docsearch', ((event: CustomEvent) => {
    const { query } = event.detail;
    
    if (searchResults && searchLoading && searchEmpty && searchResultsContainer) {
      // 検索結果を表示
      searchResults.classList.remove('hidden');
      
      // ローディング表示
      searchLoading.classList.remove('hidden');
      searchEmpty.classList.add('hidden');
      
      // 既存の結果をクリア
      const existingResults = searchResultsContainer.querySelectorAll('.search-result-item');
      existingResults.forEach(item => item.remove());
      
      // 検索を実行（実際の実装ではAPIコールなど）
      setTimeout(() => {
        performSearch(query);
      }, 500);
    }
  }) as EventListener);
  
  // 閉じるボタンの処理
  if (closeSearchResults && searchResults) {
    closeSearchResults.addEventListener('click', () => {
      searchResults.classList.add('hidden');
    });
  }
  
  // 検索実行関数（実際の実装ではAPIコールなど）
  function performSearch(query: string) {
    if (!searchLoading || !searchEmpty || !searchResultsContainer) return;
    
    // ここでは仮のデモデータを使用
    const demoResults = [
      {
        title: 'はじめに',
        excerpt: 'このドキュメントでは、Astroプロジェクトの基本的な使い方について説明します。',
        url: '/ja/v1/introduction',
        project: 'Astro',
        version: 'v1'
      },
      {
        title: 'コンポーネントの作成',
        excerpt: 'Astroコンポーネントは、UIの再利用可能な部分を定義します。',
        url: '/ja/v1/components/creating-components',
        project: 'Astro',
        version: 'v1'
      }
    ];
    
    // ローディング非表示
    searchLoading.classList.add('hidden');
    
    // 結果の表示
    if (demoResults.length > 0) {
      searchEmpty.classList.add('hidden');
      
      demoResults.forEach(result => {
        const resultElement = document.createElement('div');
        resultElement.className = 'search-result-item';
        resultElement.innerHTML = `
          <a href="${result.url}" class="block">
            <div class="p-4 border border-gray-200 rounded-md hover:bg-gray-50 dark:border-gray-700 dark:hover:bg-gray-800">
              <div class="flex items-center justify-between mb-1">
                <h3 class="font-medium text-primary-600 dark:text-primary-400">${result.title}</h3>
                <span class="text-xs text-gray-500 dark:text-gray-400">${result.project} ${result.version}</span>
              </div>
              <p class="text-sm text-gray-600 dark:text-gray-300">${result.excerpt}</p>
            </div>
          </a>
        `;
        searchResultsContainer.appendChild(resultElement);
      });
    } else {
      searchEmpty.classList.remove('hidden');
    }
  }
</script>
