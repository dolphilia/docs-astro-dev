---
import { translate } from '@docs/i18n/utils';
import type { LocaleKey } from '@docs/i18n/locales';

interface Props {
  lang: LocaleKey;
  className?: string;
}

const { lang, className = '' } = Astro.props;
---

<div 
  id="search-results-container" 
  class:list={['search-results-container hidden', className]}
>
  <div class="modal-overlay">
    <div class="modal-container">
      <div class="modal-header">
        <h2 class="modal-title">{translate('search.searchResults', lang)}</h2>
        <button 
          id="close-search-results" 
          class="close-button"
          aria-label="閉じる"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="close-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      
      <div id="search-results" class="search-results-content">
        <div class="loading-container">
          <div class="loading-animation">
            <div class="loading-content">
              <div class="loading-bar loading-bar-large"></div>
              <div class="loading-bar-group">
                <div class="loading-bar loading-bar-full"></div>
                <div class="loading-bar loading-bar-medium"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .search-results-container {
    position: fixed;
    inset: 0;
    z-index: 50;
    overflow-y: auto;
    background-color: rgba(0, 0, 0, 0.5);
  }

  .modal-overlay {
    position: relative;
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1rem;
  }

  .modal-container {
    background-color: white;
    border-radius: 0.5rem;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    width: 100%;
    max-width: 42rem;
    max-height: 80vh;
    overflow: hidden;
    display: flex;
    flex-direction: column;
  }

  .modal-header {
    padding: 1rem;
    border-bottom: 1px solid #e5e7eb;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .modal-title {
    font-size: 1.25rem;
    font-weight: 700;
  }

  .close-button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem;
    border-radius: 0.375rem;
    color: #9ca3af;
  }

  .close-button:hover {
    color: #6b7280;
    background-color: #f3f4f6;
  }

  .close-button:focus {
    outline: none;
    box-shadow: 0 0 0 2px #e5e7eb, 0 0 0 4px #3b82f6;
  }

  .close-icon {
    height: 1.5rem;
    width: 1.5rem;
  }

  .search-results-content {
    padding: 1rem;
    overflow-y: auto;
    flex-grow: 1;
  }

  .loading-container {
    display: flex;
    justify-content: center;
  }

  .loading-animation {
    display: flex;
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  @keyframes pulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }

  .loading-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    padding: 0.25rem 0;
  }

  .loading-bar {
    height: 1rem;
    background-color: #e5e7eb;
    border-radius: 0.25rem;
  }

  .loading-bar-large {
    width: 75%;
  }

  .loading-bar-full {
    width: 100%;
  }

  .loading-bar-medium {
    width: 83.333333%;
  }

  .loading-bar-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .no-results {
    text-align: center;
    padding: 2rem 0;
    color: #6b7280;
  }

  .search-result-item {
    margin-bottom: 1rem;
  }

  .result-card {
    background-color: white;
    border: 1px solid #e5e7eb;
    border-radius: 0.5rem;
    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
    padding: 1rem;
    transition: box-shadow 0.2s;
  }

  .result-card:hover {
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }

  .result-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .result-title {
    font-size: 1.125rem;
    font-weight: 500;
    color: #111827;
  }

  .result-badge {
    display: inline-flex;
    align-items: center;
    padding: 0.25rem 0.625rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 500;
    background-color: #f3f4f6;
    color: #1f2937;
  }

  .result-excerpt {
    margin-top: 0.5rem;
    font-size: 0.875rem;
    color: #4b5563;
  }

  .result-link {
    margin-top: 0.75rem;
    display: inline-flex;
    align-items: center;
    font-size: 0.875rem;
    font-weight: 500;
    color: #2563eb;
  }

  .result-link:hover {
    color: #1d4ed8;
  }

  .result-link-icon {
    margin-left: 0.25rem;
    width: 1rem;
    height: 1rem;
  }

  .highlight-text {
    background-color: #fef08a;
    padding: 0 0.25rem;
    border-radius: 0.25rem;
  }

  .error-message {
    background-color: #fee2e2;
    border: 1px solid #fecaca;
    color: #b91c1c;
    border-radius: 0.5rem;
    padding: 1rem;
    margin-bottom: 1rem;
  }

  .error-content {
    display: flex;
  }

  .error-icon {
    height: 1.25rem;
    width: 1.25rem;
    color: #ef4444;
    margin-right: 0.5rem;
  }

  .hidden {
    display: none;
  }
</style>

<script>
  // 検索結果の表示・非表示を制御
  const dom = {
    searchResultsContainer: document.getElementById('search-results-container'),
    searchResults: document.getElementById('search-results'),
    closeButton: document.getElementById('close-search-results')
  };

  // 検索イベントのリスナー
  document.addEventListener('docsearch', (event) => {
    const customEvent = event as CustomEvent;
    const query = customEvent.detail.query;
    
    if (query && dom.searchResultsContainer && dom.searchResults) {
      // 検索結果コンテナを表示
      dom.searchResultsContainer.classList.remove('hidden');
      document.body.classList.add('overflow-hidden');
      
      // 既存の結果をクリア
      const existingResults = dom.searchResults.querySelectorAll('.search-result-item, .error-message');
      existingResults.forEach(item => item.remove());
      
      // 検索を実行
      performSearch(query);
    }
  });

  // 閉じるボタンのイベントリスナー
  if (dom.closeButton) {
    dom.closeButton.addEventListener('click', () => {
      if (dom.searchResultsContainer) {
        dom.searchResultsContainer.classList.add('hidden');
        document.body.classList.remove('overflow-hidden');
      }
    });
  }

  // 背景クリックで閉じる
  if (dom.searchResultsContainer) {
    dom.searchResultsContainer.addEventListener('click', (e) => {
      if (e.target === dom.searchResultsContainer && dom.searchResultsContainer) {
        dom.searchResultsContainer.classList.add('hidden');
        document.body.classList.remove('overflow-hidden');
      }
    });
  }

  // ESCキーで閉じる
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && dom.searchResultsContainer && !dom.searchResultsContainer.classList.contains('hidden')) {
      dom.searchResultsContainer.classList.add('hidden');
      document.body.classList.remove('overflow-hidden');
    }
  });

  // 検索を実行する関数
  async function performSearch(query: string) {
    try {
      // 現在のパスから言語とバージョンを取得
      const pathParts = window.location.pathname.split('/');
      const lang = pathParts[1] || 'en';
      const version = pathParts[2] || 'v1';
      
      // 検索インデックスを取得
      const response = await fetch(`/search/index-${lang}-${version}.json`);
      
      if (!response.ok) {
        throw new Error(`検索インデックスの取得に失敗しました: ${response.status}`);
      }
      
      const searchIndex = await response.json();
      
      // 検索を実行
      const results = searchIndex.filter((item: any) => {
        const titleMatch = item.title.toLowerCase().includes(query.toLowerCase());
        const contentMatch = item.content.toLowerCase().includes(query.toLowerCase());
        return titleMatch || contentMatch;
      });
      
      // 結果を表示
      displayResults(results, query);
      
    } catch (error) {
      console.error('検索エラー:', error);
      displayError(error instanceof Error ? error.message : '検索中にエラーが発生しました');
    }
  }

  // 検索結果を表示する関数
  function displayResults(results: any[], query: string) {
    const searchResults = dom.searchResults;
    if (!searchResults) return;
    
    // ローディングインジケータを削除
    searchResults.innerHTML = '';
    
    if (results.length === 0) {
      const noResultsElement = document.createElement('div');
      noResultsElement.className = 'no-results';
      noResultsElement.textContent = `"${query}" に一致する結果が見つかりませんでした。`;
      searchResults.appendChild(noResultsElement);
      return;
    }
    
    // 結果を表示
    results.forEach(result => {
      const resultElement = document.createElement('div');
      resultElement.className = 'search-result-item';
      
      // 結果のHTMLを構築
      resultElement.innerHTML = `
        <div class="result-card">
          <div class="result-header">
            <h3 class="result-title">${result.title}</h3>
            <div class="result-badge">
              ${result.project} ${result.version}
            </div>
          </div>
          <p class="result-excerpt">${highlightMatches(result.excerpt || '', query)}</p>
          <a href="${result.url}" class="result-link">
            詳細を見る
            <svg class="result-link-icon" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
              <path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd"></path>
            </svg>
          </a>
        </div>
      `;
      
      searchResults.appendChild(resultElement);
    });
  }

  // エラーを表示する関数
  function displayError(message: string) {
    const searchResults = dom.searchResults;
    if (!searchResults) return;
    
    // ローディングインジケータを削除
    searchResults.innerHTML = '';
    
    const errorElement = document.createElement('div');
    errorElement.className = 'error-message';
    errorElement.innerHTML = `
      <div class="error-content">
        <svg class="error-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
        </svg>
        <span>${message}</span>
      </div>
    `;
    
    searchResults.appendChild(errorElement);
  }

  // 検索クエリに一致するテキストをハイライトする関数
  function highlightMatches(text: string, query: string): string {
    if (!query) return text;
    
    const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
    return text.replace(regex, '<mark class="highlight-text">$1</mark>');
  }
</script>
