---
import { Card } from '@docs/ui/components';
import { translate } from '@docs/i18n/utils';
import type { LocaleKey } from '@docs/i18n/locales';

interface Props {
  className?: string;
  lang?: LocaleKey;
}

const { className = '', lang = 'ja' } = Astro.props;
---

<div id="search-results" class:list={['search-results hidden', className]}>
  <div class="flex justify-between items-center mb-4">
    <h2 class="text-xl font-bold">{translate('search.searchResults', lang)}</h2>
    <button id="close-search-results" class="btn btn-sm btn-circle btn-ghost">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>
    </button>
  </div>
  
  <div id="search-results-container" class="space-y-4">
    <!-- 検索結果がここに動的に挿入されます -->
    <div id="search-loading" class="py-8 text-center hidden">
      <span class="loading loading-spinner loading-lg"></span>
      <p class="mt-2 opacity-70">{translate('common.loading', lang)}</p>
    </div>
    
    <div id="search-empty" class="py-8 text-center hidden">
      <div class="alert">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info shrink-0 w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
        <span id="no-results-message"></span>
      </div>
    </div>
  </div>
</div>

<script>
  import { translate } from '@docs/i18n/utils';

  // 検索結果の表示と制御
  const searchResults = document.getElementById('search-results');
  const searchResultsContainer = document.getElementById('search-results-container');
  const searchLoading = document.getElementById('search-loading');
  const searchEmpty = document.getElementById('search-empty');
  const noResultsMessage = document.getElementById('no-results-message');
  const closeSearchResults = document.getElementById('close-search-results');
  
  // 検索イベントをリッスン
  document.addEventListener('docsearch', ((event: CustomEvent) => {
    const { query } = event.detail;
    
    if (searchResults && searchLoading && searchEmpty && searchResultsContainer) {
      // 検索結果を表示
      searchResults.classList.remove('hidden');
      
      // ローディング表示
      searchLoading.classList.remove('hidden');
      searchEmpty.classList.add('hidden');
      
      // 既存の結果をクリア
      const existingResults = searchResultsContainer.querySelectorAll('.search-result-item');
      existingResults.forEach(item => item.remove());
      
      // 検索を実行
      setTimeout(() => {
        performSearch(query);
      }, 500);
    }
  }) as EventListener);
  
  // 閉じるボタンの処理
  if (closeSearchResults && searchResults) {
    closeSearchResults.addEventListener('click', () => {
      searchResults.classList.add('hidden');
    });
  }
  
  // 検索実行関数
  async function performSearch(query: string) {
    if (!searchLoading || !searchEmpty || !searchResultsContainer) return;
    
    // 現在のURLから言語とバージョンを取得
    const urlPath = window.location.pathname;
    const langMatch = urlPath.match(/^\/(en|ja)/);
    const versionMatch = urlPath.match(/\/(v[0-9]+)/);
    
    const lang = langMatch ? langMatch[1] : 'en';
    const version = versionMatch ? versionMatch[1] : 'v1';
    
    try {
      // 検索インデックスを取得
      const indexUrl = `/search/index-${lang}-${version}.json`;
      const response = await fetch(indexUrl);
      
      if (!response.ok) {
        throw new Error(`検索インデックスの取得に失敗しました: ${response.status}`);
      }
      
      const searchIndex = await response.json();
      
      // 検索を実行
      const results = searchIndex.documents.filter((doc: any) => {
        const titleMatch = doc.title.toLowerCase().includes(query.toLowerCase());
        const contentMatch = doc.content.toLowerCase().includes(query.toLowerCase());
        return titleMatch || contentMatch;
      }).slice(0, 10); // 最大10件まで表示
      
      // ローディング非表示
      searchLoading.classList.add('hidden');
      
      // 結果の表示
      if (results.length > 0) {
        searchEmpty.classList.add('hidden');
        
        // 検索結果が見つからない場合のメッセージをクリア
        if (noResultsMessage) {
          noResultsMessage.textContent = '';
        }
        
        results.forEach((result: any) => {
          // 抜粋を作成
          let excerpt = '';
          if (result.content) {
            const contentLowerCase = result.content.toLowerCase();
            const queryPos = contentLowerCase.indexOf(query.toLowerCase());
            
            if (queryPos !== -1) {
              const start = Math.max(0, queryPos - 50);
              const end = Math.min(result.content.length, queryPos + query.length + 50);
              excerpt = result.content.substring(start, end);
              
              if (start > 0) excerpt = '...' + excerpt;
              if (end < result.content.length) excerpt += '...';
            } else {
              excerpt = result.content.substring(0, 100) + '...';
            }
          }
          
          const resultElement = document.createElement('div');
          resultElement.className = 'search-result-item';
          resultElement.innerHTML = `
            <a href="${result.url}" class="block">
              <div class="card bg-base-100 shadow-sm hover:shadow-md transition-shadow">
                <div class="card-body p-4">
                  <div class="flex items-center justify-between">
                    <h3 class="card-title text-base">${result.title}</h3>
                    <div class="badge badge-sm">${result.project} ${result.version}</div>
                  </div>
                  <p class="text-sm opacity-70">${excerpt}</p>
                </div>
              </div>
            </a>
          `;
          searchResultsContainer.appendChild(resultElement);
        });
      } else {
        searchEmpty.classList.remove('hidden');
        
        // 検索結果が見つからない場合のメッセージを設定
        if (noResultsMessage) {
          const noResultsText = translate('search.noResults', lang as any).replace('{query}', query);
          noResultsMessage.textContent = noResultsText;
        }
      }
    } catch (error) {
      console.error('検索中にエラーが発生しました:', error);
      searchLoading.classList.add('hidden');
      searchEmpty.classList.remove('hidden');
      
      // エラーメッセージを表示
      const errorElement = document.createElement('div');
      errorElement.className = 'alert alert-error';
      errorElement.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
        <span>${translate('common.error', lang as any)}</span>
      `;
      searchResultsContainer.appendChild(errorElement);
    }
  }
</script>
