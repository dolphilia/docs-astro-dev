---
import { translate } from '@docs/i18n/utils';
import type { LocaleKey } from '@docs/i18n/locales';

interface Props {
  lang: LocaleKey;
  className?: string;
}

const { lang, className = '' } = Astro.props;
---

<div 
  id="search-results-container" 
  class:list={['search-results-container hidden fixed inset-0 z-50 overflow-y-auto bg-black bg-opacity-50', className]}
>
  <div class="relative min-h-screen flex items-center justify-center p-4">
    <div class="bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-[80vh] overflow-hidden flex flex-col">
      <div class="p-4 border-b flex items-center justify-between">
        <h2 class="text-xl font-bold">{translate('search.searchResults', lang)}</h2>
        <button 
          id="close-search-results" 
          class="inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500"
          aria-label="閉じる"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      
      <div id="search-results" class="p-4 overflow-y-auto flex-grow">
        <div class="flex justify-center">
          <div class="animate-pulse flex space-x-4">
            <div class="flex-1 space-y-4 py-1">
              <div class="h-4 bg-gray-200 rounded w-3/4"></div>
              <div class="space-y-2">
                <div class="h-4 bg-gray-200 rounded"></div>
                <div class="h-4 bg-gray-200 rounded w-5/6"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // 検索結果の表示・非表示を制御
  const dom = {
    searchResultsContainer: document.getElementById('search-results-container'),
    searchResults: document.getElementById('search-results'),
    closeButton: document.getElementById('close-search-results')
  };

  // 検索イベントのリスナー
  document.addEventListener('docsearch', (event) => {
    const customEvent = event as CustomEvent;
    const query = customEvent.detail.query;
    
    if (query && dom.searchResultsContainer && dom.searchResults) {
      // 検索結果コンテナを表示
      dom.searchResultsContainer.classList.remove('hidden');
      document.body.classList.add('overflow-hidden');
      
      // 既存の結果をクリア
      if (dom.searchResults) {
        const existingResults = dom.searchResults.querySelectorAll('.search-result-item, .alert-error');
        existingResults.forEach(item => item.remove());
      }
      
      // 検索を実行
      performSearch(query);
    }
  });

  // 閉じるボタンのイベントリスナー
  if (dom.closeButton) {
    dom.closeButton.addEventListener('click', () => {
      if (dom.searchResultsContainer) {
        dom.searchResultsContainer.classList.add('hidden');
        document.body.classList.remove('overflow-hidden');
      }
    });
  }

  // 背景クリックで閉じる
  if (dom.searchResultsContainer) {
    dom.searchResultsContainer.addEventListener('click', (e) => {
      if (e.target === dom.searchResultsContainer) {
        dom.searchResultsContainer.classList.add('hidden');
        document.body.classList.remove('overflow-hidden');
      }
    });
  }

  // ESCキーで閉じる
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && dom.searchResultsContainer && !dom.searchResultsContainer.classList.contains('hidden')) {
      dom.searchResultsContainer.classList.add('hidden');
      document.body.classList.remove('overflow-hidden');
    }
  });

  // 検索を実行する関数
  async function performSearch(query: string) {
    try {
      // 現在のパスから言語とバージョンを取得
      const pathParts = window.location.pathname.split('/');
      const lang = pathParts[1] || 'en';
      const version = pathParts[2] || 'v1';
      
      // 検索インデックスを取得
      const response = await fetch(`/docs-astro/search/index-${lang}-${version}.json`);
      
      if (!response.ok) {
        throw new Error(`検索インデックスの取得に失敗しました: ${response.status}`);
      }
      
      const searchIndex = await response.json();
      
      // 検索を実行
      const results = searchIndex.filter((item: any) => {
        const titleMatch = item.title.toLowerCase().includes(query.toLowerCase());
        const contentMatch = item.content.toLowerCase().includes(query.toLowerCase());
        return titleMatch || contentMatch;
      });
      
      // 結果を表示
      displayResults(results, query);
      
    } catch (error) {
      console.error('検索エラー:', error);
      displayError(error instanceof Error ? error.message : '検索中にエラーが発生しました');
    }
  }

  // 検索結果を表示する関数
  function displayResults(results: any[], query: string) {
    if (!dom.searchResults) return;
    
    // ローディングインジケータを削除
    dom.searchResults.innerHTML = '';
    
    if (results.length === 0) {
      const noResultsElement = document.createElement('div');
      noResultsElement.className = 'text-center py-8 text-gray-500';
      noResultsElement.textContent = `"${query}" に一致する結果が見つかりませんでした。`;
      dom.searchResults.appendChild(noResultsElement);
      return;
    }
    
    // 結果を表示
    results.forEach(result => {
      const resultElement = document.createElement('div');
      resultElement.className = 'search-result-item mb-4';
      
      // 結果のHTMLを構築
      resultElement.innerHTML = `
        <div class="bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md transition-shadow p-4">
          <div class="flex items-center justify-between">
            <h3 class="text-lg font-medium text-gray-900">${result.title}</h3>
            <div class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
              ${result.project} ${result.version}
            </div>
          </div>
          <p class="mt-2 text-sm text-gray-600">${highlightMatches(result.excerpt || '', query)}</p>
          <a href="${result.url}" class="mt-3 inline-flex items-center text-sm font-medium text-blue-600 hover:text-blue-800">
            詳細を見る
            <svg class="ml-1 w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
              <path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd"></path>
            </svg>
          </a>
        </div>
      `;
      
      dom.searchResults.appendChild(resultElement);
    });
  }

  // エラーを表示する関数
  function displayError(message: string) {
    if (!dom.searchResults) return;
    
    // ローディングインジケータを削除
    dom.searchResults.innerHTML = '';
    
    const errorElement = document.createElement('div');
    errorElement.className = 'bg-red-50 border border-red-200 text-red-800 rounded-lg p-4 mb-4';
    errorElement.innerHTML = `
      <div class="flex">
        <svg class="h-5 w-5 text-red-400 mr-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
        </svg>
        <span>${message}</span>
      </div>
    `;
    
    dom.searchResults.appendChild(errorElement);
  }

  // 検索クエリに一致するテキストをハイライトする関数
  function highlightMatches(text: string, query: string): string {
    if (!query) return text;
    
    const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
    return text.replace(regex, '<mark class="bg-yellow-200 px-1 rounded">$1</mark>');
  }
</script>
