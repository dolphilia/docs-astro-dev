---
/**
 * ナビゲーション項目の型定義 - Starlightスタイルに基づいたナビゲーション
 */
interface NavItem {
  /** 表示タイトル */
  title: string;
  /** リンク先URL */
  href: string;
  /** 子ナビゲーション項目（ドロップダウンメニュー用） */
  children?: NavItem[];
  /** 現在のページかどうか */
  isCurrent?: boolean;
}

/**
 * コンポーネントのプロパティ
 */
interface Props {
  /** ナビゲーション項目の配列 */
  items: NavItem[];
  /** 追加のCSSクラス */
  class?: string;
}

// プロパティの分割代入
const { items, class: className = '' } = Astro.props;

// 現在のページかどうかを判定するヘルパー関数
function isCurrentPage(item: NavItem): boolean {
  return item.isCurrent || false;
}
---

<nav class:list={['navigation', className]} aria-label="メインナビゲーション">
  <div class="nav-items">
    {items.map(item => (
      <a 
        href={item.href} 
        class:list={['nav-item', { active: isCurrentPage(item) }]}
        aria-current={isCurrentPage(item) ? 'page' : undefined}
      >
        {item.title}
      </a>
    ))}
  </div>
  
  <div class="menu-toggle">
    <button 
      type="button" 
      aria-expanded="false"
      aria-label="モバイルメニューを切り替え"
      id="mobile-menu-button"
    >
      <svg 
        xmlns="http://www.w3.org/2000/svg" 
        class="menu-icon" 
        width="24" 
        height="24" 
        viewBox="0 0 24 24" 
        fill="none" 
        stroke="currentColor" 
        stroke-width="2" 
        stroke-linecap="round" 
        stroke-linejoin="round"
        aria-hidden="true"
      >
        <line x1="3" y1="12" x2="21" y2="12"></line>
        <line x1="3" y1="6" x2="21" y2="6"></line>
        <line x1="3" y1="18" x2="21" y2="18"></line>
      </svg>
    </button>
  </div>
</nav>

<!-- モバイルメニュー -->
<div class="mobile-menu hidden" id="mobile-menu">
  <div class="mobile-menu-content">
    <ul class="mobile-nav-items">
      {items.map(item => (
        <li>
          <a 
            href={item.href} 
            class:list={['mobile-nav-item', { active: isCurrentPage(item) }]}
            aria-current={isCurrentPage(item) ? 'page' : undefined}
          >
            {item.title}
          </a>
        </li>
      ))}
    </ul>
  </div>
</div>

<style>
  /* Starlightスタイルに基づくナビゲーションスタイル */
  .navigation {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .nav-items {
    display: none;
  }

  .nav-item {
    padding: 0.5rem;
    color: var(--sl-color-gray-3);
    font-size: var(--sl-text-sm);
    font-weight: 500;
    text-decoration: none;
    border-radius: 0.25rem;
    transition: color 0.2s ease;
  }

  .nav-item:hover,
  .nav-item:focus {
    color: var(--sl-color-white);
  }

  .nav-item.active {
    color: var(--sl-color-text-accent);
    font-weight: 600;
  }

  .menu-toggle {
    display: flex;
    align-items: center;
  }

  .menu-toggle button {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem;
    background: transparent;
    border: none;
    border-radius: 0.25rem;
    color: var(--sl-color-gray-3);
    cursor: pointer;
  }

  .menu-toggle button:hover {
    color: var(--sl-color-white);
    background-color: var(--sl-color-gray-5);
  }

  .menu-icon {
    width: 1.5rem;
    height: 1.5rem;
  }

  /* モバイルメニュースタイル */
  .mobile-menu {
    position: fixed;
    top: var(--sl-nav-height);
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--sl-color-bg-nav);
    z-index: var(--sl-z-index-menu);
    overflow-y: auto;
  }

  .mobile-menu-content {
    padding: 1rem;
  }

  .mobile-nav-items {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .mobile-nav-item {
    display: block;
    padding: 0.75rem 1rem;
    color: var(--sl-color-gray-2);
    font-size: var(--sl-text-base);
    font-weight: 500;
    text-decoration: none;
    border-radius: 0.25rem;
  }

  .mobile-nav-item:hover,
  .mobile-nav-item:focus {
    color: var(--sl-color-white);
    background-color: var(--sl-color-gray-5);
  }

  .mobile-nav-item.active {
    color: var(--sl-color-text-accent);
    font-weight: 600;
  }

  .hidden {
    display: none;
  }

  /* レスポンシブスタイル */
  @media (min-width: 50em) {
    .nav-items {
      display: flex;
      gap: 1rem;
    }

    .menu-toggle {
      display: none;
    }

    .mobile-menu {
      display: none !important;
    }
  }
</style>

<script is:inline>
  document.addEventListener('DOMContentLoaded', function() {
    const mobileButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (mobileButton && mobileMenu) {
      mobileButton.addEventListener('click', function() {
        const expanded = mobileButton.getAttribute('aria-expanded') === 'true';
        mobileButton.setAttribute('aria-expanded', (!expanded).toString());
        mobileMenu.classList.toggle('hidden');
      });
    }
  });
</script>
