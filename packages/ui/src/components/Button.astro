---
interface Props {
  variant?: 'primary' | 'secondary' | 'accent' | 'info' | 'success' | 'warning' | 'error' | 'ghost' | 'link' | 'outline';
  size?: 'xs' | 'sm' | 'md' | 'lg';
  class?: string;
  [key: string]: any;
}

const {
  variant = 'primary',
  size = 'md',
  class: additionalClass = '',
  ...rest
} = Astro.props;

// カスタムボタンスタイルのマッピング
const variantStyles = {
  primary: 'bg-blue-600 hover:bg-blue-700 text-white focus:ring-blue-500',
  secondary: 'bg-gray-600 hover:bg-gray-700 text-white focus:ring-gray-500',
  accent: 'bg-purple-600 hover:bg-purple-700 text-white focus:ring-purple-500',
  info: 'bg-sky-600 hover:bg-sky-700 text-white focus:ring-sky-500',
  success: 'bg-green-600 hover:bg-green-700 text-white focus:ring-green-500',
  warning: 'bg-yellow-500 hover:bg-yellow-600 text-white focus:ring-yellow-500',
  error: 'bg-red-600 hover:bg-red-700 text-white focus:ring-red-500',
  ghost: 'bg-transparent hover:bg-gray-100 text-gray-700 hover:text-gray-900',
  link: 'bg-transparent text-blue-600 hover:text-blue-800 hover:underline p-0',
  outline: 'bg-transparent border border-current hover:bg-gray-100',
};

const sizeStyles = {
  xs: 'text-xs py-1 px-2',
  sm: 'text-sm py-1.5 px-3',
  md: 'text-base py-2 px-4',  // デフォルトサイズ
  lg: 'text-lg py-2.5 px-5',
};

// 基本クラス
const baseClasses = 'inline-flex items-center justify-center font-medium rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2';

// リンクスタイルの場合は一部のスタイルを適用しない
const isLink = variant === 'link';

const classes = [
  baseClasses,
  variantStyles[variant],
  !isLink && sizeStyles[size],
  additionalClass,
];
---

{rest.href ? (
  <a class:list={classes} {...rest}>
    <slot />
  </a>
) : (
  <button class:list={classes} {...rest}>
    <slot />
  </button>
)}
