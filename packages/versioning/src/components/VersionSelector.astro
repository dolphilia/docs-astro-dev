---
import { Button } from '@docs/ui/components';
import type { Version } from '../utils/version';

interface Props {
  versions: Version[];
  currentVersion: string;
  basePath: string;
  className?: string;
}

const { versions, currentVersion, basePath, className = '' } = Astro.props;

// 現在のバージョンオブジェクトを取得
const currentVersionObj = versions.find(v => v.id === currentVersion) || versions[0];

// バージョンリストを日付順にソート
const sortedVersions = [...versions].sort((a, b) => {
  // 最新バージョンは常に先頭
  if (a.isLatest === true && b.isLatest !== true) return -1;
  if (b.isLatest === true && a.isLatest !== true) return 1;
  
  // date プロパティの存在を確認
  const dateA = a.date ? a.date.getTime() : 0;
  const dateB = b.date ? b.date.getTime() : 0;

  // 日付の新しい順
  return dateB - dateA;
});
---

<div class:list={['version-selector', className]}>
  <div>
    <button 
      type="button" 
      class="selector-button"
      id="version-menu-button"
      aria-expanded="false"
      aria-haspopup="true"
    >
      <span class="version-label">
        {currentVersionObj.name}
        {currentVersionObj.isLatest && (
          <span class="latest-badge">
            最新
          </span>
        )}
      </span>
      <svg class="dropdown-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
      </svg>
    </button>
  </div>

  <div 
    class="dropdown-menu hidden"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="version-menu-button"
    tabindex="-1"
    id="version-menu"
  >
    <div class="menu-content" role="none">
      {sortedVersions.map(version => (
        <a 
          href={`${basePath.replace(`/${currentVersion}/`, `/${version.id}/`)}`}
          class:list={[
            'menu-item',
            version.id === currentVersion && 'menu-item-active'
          ]}
          role="menuitem"
          tabindex="-1"
          aria-current={version.id === currentVersion ? 'page' : undefined}
        >
          <div class="version-info">
            <div class="version-header">
              <span>{version.name}</span>
              {version.isLatest && (
                <span class="latest-badge">
                  最新
                </span>
              )}
            </div>
            <div class="version-date">
              {version.date && typeof version.date.toLocaleDateString === 'function' ? version.date.toLocaleDateString() : 'N/A'}
            </div>
          </div>
        </a>
      ))}
    </div>
  </div>
  
  <div class="version-links">
    {currentVersion !== 'latest' && (
      <a
        href={`${basePath.replace(`/${currentVersion}/`, '/latest/')}`}
        class="latest-link"
      >
        最新バージョンを表示
      </a>
    )}
    
    <a
      href={`${basePath.split('/').slice(0, 2).join('/')}/version-diff${basePath.split('/').slice(2).join('/')}`}
      class="diff-link"
    >
      バージョン間の差分を表示
    </a>
  </div>
</div>

<style>
  .version-selector {
    position: relative;
    display: inline-block;
    text-align: left;
  }

  .selector-button {
    display: inline-flex;
    justify-content: center;
    width: 100%;
    border-radius: 0.375rem;
    border: 1px solid #d1d5db;
    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
    padding: 0.5rem 1rem;
    background-color: white;
    font-size: 0.875rem;
    font-weight: 500;
    color: #374151;
  }

  .selector-button:hover {
    background-color: #f9fafb;
  }

  .selector-button:focus {
    outline: none;
    box-shadow: 0 0 0 2px #f9fafb, 0 0 0 4px #3b82f6;
  }

  .version-label {
    display: flex;
    align-items: center;
  }

  .latest-badge {
    display: inline-flex;
    align-items: center;
    margin-left: 0.5rem;
    padding: 0.125rem 0.625rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 500;
    background-color: #dbeafe;
    color: #1e40af;
  }

  .dropdown-icon {
    width: 1rem;
    height: 1rem;
    margin-left: 0.5rem;
  }

  .dropdown-menu {
    position: absolute;
    right: 0;
    margin-top: 0.5rem;
    width: 14rem;
    border-radius: 0.375rem;
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    background-color: white;
    border: 1px solid rgba(0, 0, 0, 0.05);
    transform-origin: top right;
    z-index: 10;
  }

  .menu-content {
    padding: 0.25rem 0;
  }

  .menu-item {
    display: block;
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
    color: #4b5563;
  }

  .menu-item:hover {
    background-color: #f3f4f6;
    color: #111827;
  }

  .menu-item-active {
    background-color: #f3f4f6;
    color: #111827;
  }

  .version-info {
    display: flex;
    flex-direction: column;
  }

  .version-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .version-date {
    font-size: 0.75rem;
    color: #6b7280;
    margin-top: 0.25rem;
  }

  .version-links {
    margin-top: 1rem;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .latest-link {
    font-size: 0.75rem;
    color: #2563eb;
  }

  .latest-link:hover {
    color: #1d4ed8;
    text-decoration: underline;
  }

  .diff-link {
    font-size: 0.875rem;
    color: #2563eb;
  }

  .diff-link:hover {
    color: #1d4ed8;
    text-decoration: underline;
  }

  .hidden {
    display: none;
  }
</style>

<script>
  // ドロップダウンメニューの表示/非表示を切り替える
  document.addEventListener('DOMContentLoaded', function() {
    const button = document.getElementById('version-menu-button');
    const menu = document.getElementById('version-menu');
    
    if (button && menu) {
      button.addEventListener('click', function() {
        const expanded = button.getAttribute('aria-expanded') === 'true';
        button.setAttribute('aria-expanded', (!expanded).toString());
        menu.classList.toggle('hidden');
      });
      
      // 外部クリックでメニューを閉じる
      document.addEventListener('click', function(event) {
        if (!button.contains(event.target as Node) && !menu.contains(event.target as Node)) {
          button.setAttribute('aria-expanded', 'false');
          menu.classList.add('hidden');
        }
      });
    }
  });
</script>
