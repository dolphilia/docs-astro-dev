---
import { Button } from '@docs/ui/components';
import type { Version } from '../utils/version';

interface Props {
  versions: Version[];
  currentVersion: string;
  basePath: string;
  className?: string;
}

const { versions, currentVersion, basePath, className = '' } = Astro.props;

// 現在のバージョンオブジェクトを取得
const currentVersionObj = versions.find(v => v.id === currentVersion) || versions[0];

// バージョンリストを日付順にソート
const sortedVersions = [...versions].sort((a, b) => {
  // 最新バージョンは常に先頭
  if (a.isLatest === true && b.isLatest !== true) return -1;
  if (b.isLatest === true && a.isLatest !== true) return 1;
  
  // date プロパティの存在を確認
  const dateA = a.date ? a.date.getTime() : 0;
  const dateB = b.date ? b.date.getTime() : 0;

  // 日付の新しい順
  return dateB - dateA;
});
---

<div class:list={['relative inline-block text-left', className]}>
  <div>
    <button 
      type="button" 
      class="inline-flex justify-center w-full rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
      id="version-menu-button"
      aria-expanded="false"
      aria-haspopup="true"
    >
      <span>
        {currentVersionObj.name}
        {currentVersionObj.isLatest && (
          <span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
            最新
          </span>
        )}
      </span>
      <svg class="w-4 h-4 ml-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
      </svg>
    </button>
  </div>

  <div 
    class="hidden origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="version-menu-button"
    tabindex="-1"
    id="version-menu"
  >
    <div class="py-1" role="none">
      {sortedVersions.map(version => (
        <a 
          href={`${basePath.replace(`/${currentVersion}/`, `/${version.id}/`)}`}
          class:list={[
            'block px-4 py-2 text-sm',
            version.id === currentVersion 
              ? 'bg-gray-100 text-gray-900' 
              : 'text-gray-700 hover:bg-gray-100 hover:text-gray-900'
          ]}
          role="menuitem"
          tabindex="-1"
          aria-current={version.id === currentVersion ? 'page' : undefined}
        >
          <div class="flex flex-col">
            <div class="flex items-center justify-between">
              <span>{version.name}</span>
              {version.isLatest && (
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                  最新
                </span>
              )}
            </div>
            <div class="text-xs text-gray-500 mt-1">
              {version.date && typeof version.date.toLocaleDateString === 'function' ? version.date.toLocaleDateString() : 'N/A'}
            </div>
          </div>
        </a>
      ))}
    </div>
  </div>
  
  <div class="mt-4 flex flex-col gap-2">
    {currentVersion !== 'latest' && (
      <a
        href={`${basePath.replace(`/${currentVersion}/`, '/latest/')}`}
        class="text-xs text-blue-600 hover:text-blue-800 hover:underline"
      >
        最新バージョンを表示
      </a>
    )}
    
    <a
      href={`${basePath.split('/').slice(0, 2).join('/')}/version-diff${basePath.split('/').slice(2).join('/')}`}
      class="text-sm text-blue-600 hover:text-blue-800 hover:underline"
    >
      バージョン間の差分を表示
    </a>
  </div>
</div>

<script>
  // ドロップダウンメニューの表示/非表示を切り替える
  document.addEventListener('DOMContentLoaded', function() {
    const button = document.getElementById('version-menu-button');
    const menu = document.getElementById('version-menu');
    
    if (button && menu) {
      button.addEventListener('click', function() {
        const expanded = button.getAttribute('aria-expanded') === 'true';
        button.setAttribute('aria-expanded', (!expanded).toString());
        menu.classList.toggle('hidden');
      });
      
      // 外部クリックでメニューを閉じる
      document.addEventListener('click', function(event) {
        if (!button.contains(event.target as Node) && !menu.contains(event.target as Node)) {
          button.setAttribute('aria-expanded', 'false');
          menu.classList.add('hidden');
        }
      });
    }
  });
</script>
