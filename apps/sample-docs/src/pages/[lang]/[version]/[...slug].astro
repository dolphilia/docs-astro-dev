---
import { getCollection, type CollectionEntry } from 'astro:content';
import DocLayout from '../../../layouts/DocLayout.astro';
import type { GetStaticPathsResult } from 'astro';
import type { LocaleKey } from '@docs/i18n/locales';
import { TableOfContents, Pagination, EditLink } from '@docs/ui/components';
import docsConfig from '../../../config/docs.config';
import { mergePagination, type PageLink } from '@docs/versioning/utils';
import { generateFileBasedPagination, checkFileExists } from '../../../utils/content-utils';

// 見出しの型定義
interface Heading {
  depth: number;
  slug: string;
  text: string;
}

// 目次項目の型定義
interface TOCItem extends Heading {
  indent: number;
}

export async function getStaticPaths(): Promise<GetStaticPathsResult> {
  // パフォーマンス計測開始
  console.time('getStaticPaths execution time');
  
  // ドキュメントコレクションを取得
  const docs = await getCollection('docs');
  
  // 結果を生成
  const result = docs.map((entry: CollectionEntry<'docs'>) => {
    // スラグからパスパラメータを抽出
    // 例: "en/v1/guide/getting-started" → { lang: "en", version: "v1", slug: "guide/getting-started" }
    const [lang, version, ...slugParts] = entry.slug.split('/');
    const slug = slugParts.join('/');
    
    return {
      params: { lang, version, slug },
      props: { entry }
    };
  });
  
  // パフォーマンス計測終了
  console.timeEnd('getStaticPaths execution time');
  // ドキュメント数をログ出力
  console.log(`Generated ${result.length} static paths`);
  
  return result;
}

const { entry } = Astro.props as { entry: CollectionEntry<'docs'> };
const { Content, headings } = await entry.render();

// 言語とバージョンをパラメータから取得
const { lang: langParam, version: versionParam } = Astro.params;
const lang = (langParam || 'en') as LocaleKey;
const version = String(versionParam || 'v1');

// GitHub Pagesのベースパス
const baseUrl = '';

// 目次の生成
const tableOfContents: TOCItem[] = headings.filter((heading: Heading) => heading.depth <= 3).map((heading: Heading) => ({
  ...heading,
  slug: heading.slug,
  indent: (heading.depth - 1) * 16 // インデントのサイズを計算
}));

// ファイルベースのページネーション生成
let autoPagination = {};
try {
  // entry.slug から情報を抽出 (例: "en/v1/guide/01-getting-started")
  const slugParts = entry.slug.split('/');
  const currentSection = slugParts[2]; // "guide"
  const currentFile = slugParts[3]; // "01-getting-started"
  const currentSlug = currentFile.replace(/^\d+-/, ''); // "getting-started"
  
  // ファイル構造ベースのページネーションを生成
  autoPagination = await generateFileBasedPagination(
    lang,
    version,
    currentSection,
    currentSlug,
    docsConfig.baseUrl
  );
  
  console.log(`[File-Based Pagination] Generated for ${lang}/${version}/${currentSection}/${currentSlug}:`, autoPagination);
} catch (error) {
  console.error('[File-Based Pagination] Error generating pagination:', error);
}

// 手動設定のページネーション情報を取得（存在するファイルのみ）
let manualPrev: PageLink | undefined = undefined;
let manualNext: PageLink | undefined = undefined;

if (entry.data.prev) {
  const prevExists = await checkFileExists(entry.data.prev.link);
  if (prevExists) {
    manualPrev = {
      title: entry.data.prev.text,
      url: docsConfig.baseUrl + entry.data.prev.link
    };
  } else {
    console.warn(`[Manual Pagination] Previous page file does not exist: ${entry.data.prev.link}`);
  }
}

if (entry.data.next) {
  const nextExists = await checkFileExists(entry.data.next.link);
  if (nextExists) {
    manualNext = {
      title: entry.data.next.text,
      url: docsConfig.baseUrl + entry.data.next.link
    };
  } else {
    console.warn(`[Manual Pagination] Next page file does not exist: ${entry.data.next.link}`);
  }
}

// 手動設定と自動生成を統合（手動設定を優先）
const finalPagination = mergePagination(manualPrev, manualNext, autoPagination);
---

<DocLayout title={entry.data.title} lang={lang} version={version}>
  <h1>{entry.data.title}</h1>
  {entry.data.description && <p class="article-description">{entry.data.description}</p>}
  
  <Content />
  
  {/* ページナビゲーション */}
  <div class="navigation-container">
    <Pagination 
      prev={finalPagination.prev}
      next={finalPagination.next}
    />
  </div>
  
  {/* 編集リンク */}
  <div class="edit-link-container">
    <EditLink 
      url={`https://github.com/dolphilia/edit/main/apps/sample-docs/src/content/docs/${entry.slug}.mdx`}
      text="このページをGitHubで編集"
    />
  </div>
  
  {/* 目次は DocLayout のスロットに渡す */}
  <TableOfContents 
    headings={headings.map(h => ({ depth: h.depth, text: h.text, slug: h.slug, children: [] }))}
    minLevel={2}
    maxLevel={3}
    lang={lang}
    slot="toc"
  />
</DocLayout>

<style>
  .article-description {
    font-size: 1.125rem;
    color: #4b5563;
    margin-bottom: 1.5rem;
  }

  :global(.dark) .article-description {
    color: #9ca3af;
  }

  .navigation-container {
    margin-top: 3rem;
    padding-top: 1.5rem;
    border-top: 1px solid var(--sl-color-gray-5);
  }

  .edit-link-container {
    margin-top: 2rem;
    margin-bottom: 2rem;
    font-size: 0.875rem;
    color: #6b7280;
    text-align: right;
  }

  :global(.dark) .edit-link-container {
    color: #9ca3af;
  }

</style>
