---
import { getCollection, type CollectionEntry } from 'astro:content';
import DocLayout from '../../../layouts/DocLayout.astro';
import type { GetStaticPathsResult } from 'astro';
import type { LocaleKey } from '@docs/i18n/locales';

// 見出しの型定義
interface Heading {
  depth: number;
  slug: string;
  text: string;
}

// 目次項目の型定義
interface TOCItem extends Heading {
  indent: number;
}

export async function getStaticPaths(): Promise<GetStaticPathsResult> {
  const docs = await getCollection('docs');
  
  return docs.map((entry: CollectionEntry<'docs'>) => {
    // スラグからパスパラメータを抽出
    // 例: "en/v1/guide/getting-started" → { lang: "en", version: "v1", slug: "guide/getting-started" }
    const [lang, version, ...slugParts] = entry.slug.split('/');
    const slug = slugParts.join('/');
    
    return {
      params: { lang, version, slug },
      props: { entry }
    };
  });
}

const { entry } = Astro.props as { entry: CollectionEntry<'docs'> };
const { Content, headings } = await entry.render();

// 言語とバージョンをパラメータから取得
const { lang: langParam, version: versionParam } = Astro.params;
const lang = (langParam || 'en') as LocaleKey;
const version = String(versionParam || 'v1');

// GitHub Pagesのベースパス
const baseUrl = '/docs-astro';

// 目次の生成
const tableOfContents: TOCItem[] = headings.filter((heading: Heading) => heading.depth <= 3).map((heading: Heading) => ({
  ...heading,
  slug: heading.slug,
  indent: (heading.depth - 1) * 16 // インデントのサイズを計算
}));
---

<DocLayout title={entry.data.title} lang={lang} version={version}>
  <div class="content-layout">
    <div class="main-column">
      <article class="article">
        <h1>{entry.data.title}</h1>
        {entry.data.description && <p class="article-description">{entry.data.description}</p>}
        
        <Content />
        
        {/* 前後のページナビゲーション */}
        <div class="page-navigation">
          {entry.data.prev && (
            <a href={entry.data.prev.link} class="prev-link">
              <span class="nav-arrow">←</span>
              <span class="nav-content">
                <span class="nav-label">前のページ</span>
                <span class="nav-title">{entry.data.prev.text}</span>
              </span>
            </a>
          )}
          
          {entry.data.next && (
            <a href={entry.data.next.link} class="next-link">
              <span class="nav-content">
                <span class="nav-label">次のページ</span>
                <span class="nav-title">{entry.data.next.text}</span>
              </span>
              <span class="nav-arrow">→</span>
            </a>
          )}
        </div>
        
        {/* 編集リンク */}
        <div class="edit-link-container">
          <a 
            href={`https://github.com/dolphilia/docs-astro/edit/main/apps/sample-docs/src/content/docs/${entry.slug}.mdx`} 
            target="_blank" 
            rel="noopener noreferrer"
            class="edit-link"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="edit-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
            </svg>
            このページをGitHubで編集
          </a>
        </div>
      </article>
    </div>
    
    {/* 目次サイドバー */}
    <div class="toc-column">
      <div class="toc-container">
        <h3 class="toc-title">このページの目次</h3>
        <ul class="toc-list">
          {tableOfContents.map((heading: TOCItem) => (
            <li class="toc-item">
              <a 
                href={`#${heading.slug}`} 
                class="toc-link"
                style={`margin-left: ${heading.indent}px;`}
              >
                {heading.text}
              </a>
            </li>
          ))}
        </ul>
      </div>
    </div>
  </div>
</DocLayout>

<style>
  .content-layout {
    display: flex;
    flex-direction: column;
  }

  @media (min-width: 768px) {
    .content-layout {
      flex-direction: row;
    }
  }

  .main-column {
    width: 100%;
  }

  @media (min-width: 768px) {
    .main-column {
      width: 75%;
      padding-right: 2rem;
    }
  }

  .article-description {
    font-size: 1.125rem;
    color: #4b5563;
    margin-bottom: 1.5rem;
  }

  :global(.dark) .article-description {
    color: #9ca3af;
  }

  .page-navigation {
    margin-top: 3rem;
    padding-top: 1.5rem;
    border-top: 1px solid #e5e7eb;
    display: flex;
    justify-content: space-between;
  }

  :global(.dark) .page-navigation {
    border-top-color: #1f2937;
  }

  .prev-link,
  .next-link {
    display: flex;
    align-items: center;
    text-decoration: none;
  }

  .next-link {
    margin-left: auto;
  }

  .nav-arrow {
    margin: 0 0.5rem;
  }

  .nav-content {
    display: flex;
    flex-direction: column;
  }

  .nav-label {
    display: block;
    font-size: 0.875rem;
    color: #6b7280;
  }

  :global(.dark) .nav-label {
    color: #9ca3af;
  }

  .nav-title {
    display: block;
    font-weight: 500;
  }

  .prev-link:hover .nav-title,
  .next-link:hover .nav-title {
    color: #3b82f6;
  }

  .edit-link-container {
    margin-top: 2rem;
    font-size: 0.875rem;
    color: #6b7280;
  }

  :global(.dark) .edit-link-container {
    color: #9ca3af;
  }

  .edit-link {
    display: inline-flex;
    align-items: center;
    color: inherit;
    text-decoration: none;
  }

  .edit-link:hover {
    color: #3b82f6;
  }

  .edit-icon {
    height: 1rem;
    width: 1rem;
    margin-right: 0.25rem;
  }

  .toc-column {
    width: 100%;
    margin-top: 2rem;
  }

  @media (min-width: 768px) {
    .toc-column {
      width: 25%;
      margin-top: 0;
    }
  }

  .toc-container {
    position: sticky;
    top: 1rem;
  }

  .toc-title {
    font-size: 0.875rem;
    font-weight: 600;
    color: #111827;
    margin-bottom: 1rem;
  }

  :global(.dark) .toc-title {
    color: #f9fafb;
  }

  .toc-list {
    font-size: 0.875rem;
  }

  .toc-item {
    margin-bottom: 0.5rem;
  }

  .toc-link {
    color: #4b5563;
    text-decoration: none;
    display: block;
  }

  .toc-link:hover {
    color: #3b82f6;
  }

  :global(.dark) .toc-link {
    color: #9ca3af;
  }

  :global(.dark) .toc-link:hover {
    color: #60a5fa;
  }
</style>
