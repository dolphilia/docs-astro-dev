---
import { translatePath } from '@docs/i18n/utils';
import type { LocaleKey } from '@docs/i18n/locales';
import { Dropdown, DropdownItem } from '@docs/ui/components';

// 定数定義
const BASE_URL = '/docs-astro';
const LANG_NAMES: Record<string, string> = {
  en: 'English',
  ja: '日本語'
};

// コンポーネントのプロパティ型定義
interface Props {
  currentLang: string;
  supportedLangs?: string[];
  className?: string;
}

// プロパティの取得と初期値設定
const { 
  currentLang, 
  supportedLangs = ['en', 'ja'], 
  className = '' 
} = Astro.props;

// 現在のパスから相対パスを取得
const currentPath = Astro.url.pathname;
const relativePath = currentPath.replace(BASE_URL, '');

// 各言語のパス情報を生成
interface LangPathInfo {
  lang: string;
  name: string;
  path: string;
  isCurrent: boolean;
}

// 各言語のパス情報を生成
const langPaths: LangPathInfo[] = supportedLangs.map(langCode => {
  // 型変換を行い、translatePathに渡す
  const localeKey = langCode as LocaleKey;
  
  return {
    lang: langCode,
    name: LANG_NAMES[langCode] || langCode,
    path: `${BASE_URL}${translatePath(relativePath, localeKey)}`,
    isCurrent: langCode === currentLang
  };
});
---

<Dropdown 
  label={LANG_NAMES[currentLang] || currentLang}
  align="right"
  width="14rem"
  class={className}
>
  {langPaths.map((pathInfo) => (
    <DropdownItem 
      label={pathInfo.name}
      href={pathInfo.path}
      isActive={pathInfo.isCurrent}
    />
  ))}
</Dropdown>
