---
import { translatePath } from '@docs/i18n/utils';
import type { LocaleKey } from '@docs/i18n/locales';
import { Dropdown, DropdownItem, Icon } from '@docs/ui/components';

// 定数定義
const BASE_URL = '/docs-astro';
const LANG_NAMES: Record<string, string> = {
  en: 'English',
  ja: '日本語'
};

// 言語フラグアイコン（ISO 639-1コードをキーとして使用）
const LANG_FLAGS: Record<string, string> = {
  en: '🇺🇸',
  ja: '🇯🇵'
};

// コンポーネントのプロパティ型定義
interface Props {
  currentLang: string;
  currentVersion?: string;
  supportedLangs?: string[];
  className?: string;
  showLanguageInfo?: boolean;
}

// プロパティの取得と初期値設定
const { 
  currentLang, 
  currentVersion,
  supportedLangs = ['en', 'ja'], 
  className = '',
  showLanguageInfo = false
} = Astro.props;

// 現在のパスから相対パスを取得
const currentPath = Astro.url.pathname;
const relativePath = currentPath.replace(BASE_URL, '');

// バージョン情報を抽出
const versionMatch = relativePath.match(/\/([^\/]+)\/v([^\/]+)/);
const hasVersionInPath = !!versionMatch;

// 各言語のパス情報を生成
interface LangPathInfo {
  lang: string;
  name: string;
  flag: string;
  path: string;
  isCurrent: boolean;
}

// 各言語のパス情報を生成
const langPaths: LangPathInfo[] = supportedLangs.map(langCode => {
  // 型変換を行い、translatePathに渡す
  const localeKey = langCode as LocaleKey;
  
  // 言語切り替え時にバージョン情報を保持するためのパス生成
  let translatedPath = translatePath(relativePath, localeKey);
  
  // バージョン情報が含まれている場合、正しいパスを構築
  if (hasVersionInPath && currentVersion) {
    // バージョンパスを保持するように修正
    translatedPath = translatedPath.replace(/\/([^\/]+)\/v([^\/]+)/, `/${langCode}/v${versionMatch[2]}`);
  }
  
  return {
    lang: langCode,
    name: LANG_NAMES[langCode] || langCode,
    flag: LANG_FLAGS[langCode] || '🌐',
    path: `${BASE_URL}${translatedPath}`,
    isCurrent: langCode === currentLang
  };
});

// 言語に関する追加情報
interface LanguageInfo {
  nativeName: string;
  englishName: string;
  direction: string;
  description: string;
}

const languageInfo: Record<string, LanguageInfo> = {
  en: {
    nativeName: 'English',
    englishName: 'English',
    direction: 'ltr',
    description: 'Official documentation in English'
  },
  ja: {
    nativeName: '日本語',
    englishName: 'Japanese',
    direction: 'ltr',
    description: '日本語の公式ドキュメント'
  }
};
---

<div class="language-selector-container">
  <Dropdown 
    label={LANG_NAMES[currentLang] || currentLang}
    align="right"
    width="14rem"
    class={`language-dropdown ${className}`}
  >
    <div class="language-dropdown-header" slot="before-items">
      <Icon name="document" class="language-icon" />
      <span>言語を選択</span>
    </div>
    
    {langPaths.map((pathInfo) => (
      <DropdownItem 
        label={pathInfo.name}
        href={pathInfo.path}
        isActive={pathInfo.isCurrent}
      >
        <span slot="before-label" class="language-flag">{pathInfo.flag}</span>
        {pathInfo.isCurrent && (
          <span slot="after-label" class="language-current-badge">現在</span>
        )}
        {showLanguageInfo && languageInfo[pathInfo.lang] && (
          <div class="language-info">
            <div class="language-native-name">
              {languageInfo[pathInfo.lang].nativeName}
              {languageInfo[pathInfo.lang].nativeName !== languageInfo[pathInfo.lang].englishName && (
                <span class="language-english-name">({languageInfo[pathInfo.lang].englishName})</span>
              )}
            </div>
            <div class="language-description">{languageInfo[pathInfo.lang].description}</div>
          </div>
        )}
      </DropdownItem>
    ))}
    
    <div class="language-dropdown-footer" slot="after-items">
      <a href="https://github.com/dolphilia/docs-astro/tree/main/packages/i18n" class="language-footer-link" target="_blank" rel="noopener">
        <Icon name="external-link" class="language-footer-icon" />
        翻訳に貢献する
      </a>
    </div>
  </Dropdown>
  
  {showLanguageInfo && (
    <div class="language-info-panel">
      <h3 class="language-info-title">現在の言語: {LANG_NAMES[currentLang]}</h3>
      <div class="language-info-content">
        <p class="language-info-description">
          {languageInfo[currentLang]?.description || ''}
        </p>
        <div class="language-info-meta">
          <div class="language-info-item">
            <span class="language-info-label">ネイティブ名:</span>
            <span class="language-info-value">{languageInfo[currentLang]?.nativeName || currentLang}</span>
          </div>
          <div class="language-info-item">
            <span class="language-info-label">英語名:</span>
            <span class="language-info-value">{languageInfo[currentLang]?.englishName || currentLang}</span>
          </div>
          <div class="language-info-item">
            <span class="language-info-label">テキスト方向:</span>
            <span class="language-info-value">{languageInfo[currentLang]?.direction === 'rtl' ? '右から左' : '左から右'}</span>
          </div>
        </div>
      </div>
    </div>
  )}
</div>

<style>
  .language-selector-container {
    display: inline-block;
  }

  .language-dropdown {
    position: relative;
  }

  .language-dropdown-header {
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--sl-color-gray-5, #6b7280);
    border-bottom: 1px solid var(--sl-color-gray-2, #e5e7eb);
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .language-dropdown-footer {
    padding: 0.5rem 1rem;
    border-top: 1px solid var(--sl-color-gray-2, #e5e7eb);
  }

  .language-footer-link {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    color: var(--sl-color-primary, #2563eb);
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .language-footer-link:hover {
    color: var(--sl-color-primary-dark, #1d4ed8);
    text-decoration: underline;
  }

  .language-footer-icon {
    font-size: 1rem;
    color: currentColor;
  }

  .language-icon {
    font-size: 1rem;
    color: var(--sl-color-gray-4, #9ca3af);
  }

  .language-flag {
    display: inline-block;
    margin-right: 0.5rem;
    font-size: 1.25rem;
    line-height: 1;
  }

  .language-current-badge {
    display: inline-flex;
    align-items: center;
    padding: 0.125rem 0.5rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 500;
    line-height: 1;
    background-color: var(--sl-color-blue-2, #dbeafe);
    color: var(--sl-color-blue-9, #1e40af);
  }

  .language-info {
    margin-top: 0.25rem;
    font-size: 0.75rem;
  }

  .language-native-name {
    font-weight: 500;
    color: var(--sl-color-gray-7, #374151);
  }

  .language-english-name {
    font-weight: normal;
    color: var(--sl-color-gray-5, #6b7280);
    margin-left: 0.25rem;
  }

  .language-description {
    color: var(--sl-color-gray-6, #4b5563);
    margin-top: 0.125rem;
    line-height: 1.25;
  }

  .language-info-panel {
    margin-top: 1rem;
    border: 1px solid var(--sl-color-gray-2, #e5e7eb);
    border-radius: 0.375rem;
    overflow: hidden;
  }

  .language-info-title {
    padding: 0.75rem 1rem;
    font-size: 0.875rem;
    font-weight: 600;
    background-color: var(--sl-color-gray-1, #f9fafb);
    border-bottom: 1px solid var(--sl-color-gray-2, #e5e7eb);
    margin: 0;
  }

  .language-info-content {
    padding: 1rem;
  }

  .language-info-description {
    margin: 0 0 1rem 0;
    font-size: 0.875rem;
    line-height: 1.5;
    color: var(--sl-color-gray-8, #1f2937);
  }

  .language-info-meta {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 0.5rem;
  }

  .language-info-item {
    font-size: 0.75rem;
    line-height: 1.5;
  }

  .language-info-label {
    font-weight: 500;
    color: var(--sl-color-gray-6, #4b5563);
  }

  .language-info-value {
    color: var(--sl-color-gray-8, #1f2937);
  }

  /* ダークモード対応 */
  :global(.dark) .language-dropdown-header,
  :global(.dark) .language-dropdown-footer {
    border-color: var(--sl-color-gray-7, #374151);
  }

  :global(.dark) .language-current-badge {
    background-color: rgba(30, 64, 175, 0.2);
    color: var(--sl-color-blue-3, #93c5fd);
  }

  :global(.dark) .language-native-name {
    color: var(--sl-color-gray-3, #d1d5db);
  }

  :global(.dark) .language-english-name {
    color: var(--sl-color-gray-5, #6b7280);
  }

  :global(.dark) .language-description {
    color: var(--sl-color-gray-4, #9ca3af);
  }

  :global(.dark) .language-info-panel {
    border-color: var(--sl-color-gray-7, #374151);
  }

  :global(.dark) .language-info-title {
    background-color: var(--sl-color-gray-8, #1f2937);
    border-color: var(--sl-color-gray-7, #374151);
  }

  :global(.dark) .language-info-description {
    color: var(--sl-color-gray-3, #d1d5db);
  }

  :global(.dark) .language-info-label {
    color: var(--sl-color-gray-4, #9ca3af);
  }

  :global(.dark) .language-info-value {
    color: var(--sl-color-gray-2, #e5e7eb);
  }

  /* アニメーション */
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-0.25rem); }
    to { opacity: 1; transform: translateY(0); }
  }

  .language-dropdown :global(.dropdown-content) {
    animation: fadeIn 0.2s ease-out;
  }
</style>

<script>
  // 言語切り替え時のURLパス修正
  document.addEventListener('DOMContentLoaded', () => {
    // 言語選択リンクのクリックイベントを監視
    const languageLinks = document.querySelectorAll('.language-dropdown .dropdown-item');
    
    languageLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        // 現在のURLからバージョン情報を抽出
        const currentPath = window.location.pathname;
        const versionMatch = currentPath.match(/\/([^\/]+)\/v([^\/]+)/);
        
        if (versionMatch) {
          const href = (e.currentTarget as HTMLAnchorElement).getAttribute('href');
          if (href) {
            // 新しいURLにバージョン情報が正しく含まれているか確認
            const newUrlMatch = href.match(/\/([^\/]+)\/v([^\/]+)/);
            
            if (!newUrlMatch || newUrlMatch[2] !== versionMatch[2]) {
              // バージョン情報が正しくない場合、URLを修正
              e.preventDefault();
              
              // 新しい言語コードを抽出
              const newLangMatch = href.match(/\/([^\/]+)(\/|$)/);
              if (newLangMatch) {
                const newLang = newLangMatch[1];
                // 正しいバージョン情報を含むURLを構築
                const correctedUrl = href.replace(/\/([^\/]+)(\/|$)/, `/${newLang}/v${versionMatch[2]}/`);
                window.location.href = correctedUrl;
              }
            }
          }
        }
      });
    });
  });
</script>
