---
import { translatePath } from '@docs/i18n/utils';
import type { LocaleKey } from '@docs/i18n/locales';

// 定数定義
const BASE_URL = '/docs-astro';
const LANG_NAMES: Record<string, string> = {
  en: 'English',
  ja: '日本語'
};

// コンポーネントのプロパティ型定義
interface Props {
  currentLang: string;
  supportedLangs?: string[];
  className?: string;
}

// プロパティの取得と初期値設定
const { 
  currentLang, 
  supportedLangs = ['en', 'ja'], 
  className = '' 
} = Astro.props;

// 現在のパスから相対パスを取得
const currentPath = Astro.url.pathname;
const relativePath = currentPath.replace(BASE_URL, '');

// 各言語のパス情報を生成
interface LangPathInfo {
  lang: string;
  name: string;
  path: string;
  isCurrent: boolean;
}

// 各言語のパス情報を生成
const langPaths: LangPathInfo[] = supportedLangs.map(langCode => {
  // 型変換を行い、translatePathに渡す
  const localeKey = langCode as LocaleKey;
  
  return {
    lang: langCode,
    name: LANG_NAMES[langCode] || langCode,
    path: `${BASE_URL}${translatePath(relativePath, localeKey)}`,
    isCurrent: langCode === currentLang
  };
});
---

<div class:list={['relative inline-block text-left', className]}>
  {/* 言語選択ボタン */}
  <div>
    <button 
      type="button" 
      class="inline-flex justify-center w-full rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
      id="language-menu-button"
      aria-expanded="false"
      aria-haspopup="true"
    >
      <span>{LANG_NAMES[currentLang] || currentLang}</span>
      <svg 
        class="w-4 h-4 ml-2" 
        xmlns="http://www.w3.org/2000/svg" 
        viewBox="0 0 20 20" 
        fill="currentColor"
        aria-hidden="true"
      >
        <path 
          fill-rule="evenodd" 
          d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" 
          clip-rule="evenodd" 
        />
      </svg>
    </button>
  </div>
  
  {/* ドロップダウンメニュー (初期状態では非表示) */}
  <div 
    class="hidden origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="language-menu-button"
    tabindex="-1"
    id="language-menu"
  >
    <div class="py-1" role="none">
      {langPaths.map((pathInfo) => (
        <a 
          href={pathInfo.path} 
          class:list={[
            'block px-4 py-2 text-sm',
            pathInfo.isCurrent 
              ? 'bg-gray-100 text-gray-900' 
              : 'text-gray-700 hover:bg-gray-100 hover:text-gray-900'
          ]}
          role="menuitem"
          tabindex="-1"
          aria-current={pathInfo.isCurrent ? 'page' : undefined}
        >
          {pathInfo.name}
        </a>
      ))}
    </div>
  </div>
</div>

<script>
  // ドロップダウンメニューの表示/非表示を切り替える
  document.addEventListener('DOMContentLoaded', function() {
    const button = document.getElementById('language-menu-button');
    const menu = document.getElementById('language-menu');
    
    if (button && menu) {
      button.addEventListener('click', function() {
        const expanded = button.getAttribute('aria-expanded') === 'true';
        button.setAttribute('aria-expanded', (!expanded).toString());
        menu.classList.toggle('hidden');
      });
      
      // 外部クリックでメニューを閉じる
      document.addEventListener('click', function(event) {
        if (!button.contains(event.target as Node) && !menu.contains(event.target as Node)) {
          button.setAttribute('aria-expanded', 'false');
          menu.classList.add('hidden');
        }
      });
    }
  });
</script>
