---
import { getLanguage, translatePath } from '@docs/i18n/utils';

interface Props {
  currentLang: string;
  supportedLangs?: string[];
  className?: string;
}

const { 
  currentLang, 
  supportedLangs = ['en', 'ja'], 
  className = '' 
} = Astro.props;

// 言語名のマッピング
const langNames: Record<string, string> = {
  en: 'English',
  ja: '日本語'
};

// 現在のパスを取得
const currentPath = Astro.url.pathname;

import type { LocaleKey } from '@docs/i18n/locales';

// 各言語のパスを生成
const langPaths = supportedLangs.map(langStr => {
  const lang = langStr as LocaleKey; // string を LocaleKey として扱う
  return {
    lang,
    name: langNames[lang] || lang,
    path: translatePath(currentPath, lang),
    isCurrent: lang === currentLang
  };
});
---

<div class:list={['dropdown dropdown-end', className]}>
  <div tabindex="0" role="button" class="btn btn-ghost m-1">
    <span>{langNames[currentLang] || currentLang}</span>
    <svg class="w-4 h-4 ml-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
      <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
    </svg>
  </div>
  <ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
    {langPaths.map(({ lang, name, path, isCurrent }) => (
      <li>
        <a href={path} class={isCurrent ? 'active' : ''}>
          {name}
        </a>
      </li>
    ))}
  </ul>
</div>
