---
import MainLayout from './MainLayout.astro';
import { Sidebar, TableOfContents } from '@docs/ui/components';
import { VersionSelector } from '@docs/versioning/components';
import { SearchBar, SearchResults } from '@docs/search/components';
import { translate } from '@docs/i18n/utils';
import type { LocaleKey } from '@docs/i18n/locales';

// 設定ファイルのインポート
import docsConfig from '../config/docs.config';
import versions from '../config/versions.config';
import { getSidebarAsync } from '../config/sidebar.config';

interface Props {
  title: string;
  lang: LocaleKey;
  version: string;
}

const { title, lang: langProp, version } = Astro.props;
const lang = langProp as LocaleKey;

// ベースパスの取得
const baseUrl = docsConfig.baseUrl;

// サイドバー項目の取得（非同期）
const sidebarItems = await getSidebarAsync(lang, version, baseUrl);

// 翻訳キーの定数化
const TRANSLATION_KEYS = {
  SEARCH_PLACEHOLDER: 'search.placeholder',
  DOCUMENTATION: 'docs.documentation'
} as const;

// 目次があるかどうか（実際のプロジェクトでは動的に判断する）
const hasToc = true;
---

<MainLayout title={title} lang={lang} version={version} hasSidebar={true} hasToc={hasToc}>
  <div class="lg:sl-flex">
    <aside class="sidebar print:hidden">
      <div class="sidebar-pane">
        <div class="sidebar-content sl-flex">
          <div class="search-container">
            <SearchBar lang={lang} placeholder={translate(TRANSLATION_KEYS.SEARCH_PLACEHOLDER, lang)} />
            <SearchResults className="search-results" lang={lang} />
          </div>

          <VersionSelector 
            currentVersion={version}
            versions={versions}
            basePath={`${baseUrl}/${lang}`}
          />

          <Sidebar 
            items={sidebarItems} 
            title={translate(TRANSLATION_KEYS.DOCUMENTATION, lang)} 
          />
        </div>
      </div>
    </aside>
    
    {hasToc && (
      <aside class="right-sidebar-container print:hidden">
        <div class="right-sidebar">
          <div class="toc-container">
            {Astro.slots.has('toc') ? (
              <slot name="toc" />
            ) : (
              <TableOfContents headings={[]} minLevel={2} maxLevel={3} lang={lang} />
            )}
          </div>
        </div>
      </aside>
    )}
    
    <div class="main-pane">
      <div class="content-panel">
        <div class="sl-container">
          <article class="sl-markdown-content">
            <slot />
          </article>
        </div>
      </div>
    </div>
  </div>
</MainLayout>

<style>
  /* サイドバースタイル */
  .sidebar-pane {
    visibility: visible;
    position: inherit;
    z-index: var(--sl-z-index-menu);
    inset-block: var(--sl-nav-height) 0;
    inset-inline-start: 0;
    width: 100%;
    background-color: var(--sl-color-bg-sidebar);
    overflow-y: auto;
  }

  .sidebar-content {
    height: 100%;
    min-height: max-content;
    padding: 1rem var(--sl-sidebar-pad-x) 0;
    flex-direction: column;
    gap: 1rem;
  }

  .search-container {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .search-results {
    margin-top: 0.5rem;
  }

  /* 右サイドバー（目次）スタイル */
  .right-sidebar-container {
    display: none;
  }

  .right-sidebar {
    padding-top: var(--sl-nav-height);
    padding-inline: 1rem;
  }

  .toc-container {
    position: sticky;
    top: calc(var(--sl-nav-height) + 1rem);
  }


  /* メインコンテンツスタイル */
  .main-pane {
    width: 100%;
  }

  .content-panel {
    padding: 1.5rem var(--sl-content-pad-x);
  }

  .content-panel + .content-panel {
    border-top: 1px solid var(--sl-color-hairline);
  }

  /* レスポンシブスタイル */
  @media (min-width: 50em) {
    .sidebar-pane {
      width: var(--sl-sidebar-width);
      border-inline-end: 1px solid var(--sl-color-hairline-shade);
    }

    .sidebar-content::after {
      content: '';
      padding-bottom: 1px;
    }
  }

  @media (min-width: 72rem) {
    .right-sidebar-container {
      display: block;
      order: 2;
      position: relative;
      width: calc(
        var(--sl-sidebar-width) + (100% - var(--sl-content-width) - var(--sl-sidebar-width)) / 2
      );
    }

    .right-sidebar {
      position: inherit;
      top: 0;
      border-inline-start: 1px solid var(--sl-color-hairline);
      width: 100%;
      height: 100vh;
      overflow-y: auto;
      scrollbar-width: none;
    }

    .main-pane {
      order: 1;
      width: calc(
        var(--sl-content-width) + (100% - var(--sl-content-width) - var(--sl-sidebar-width)) / 2
      );
    }
  }
</style>
